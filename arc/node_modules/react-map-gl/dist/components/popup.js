'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _react = require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _viewportMercatorProject = require('viewport-mercator-project');

var _autobind = require('../utils/autobind');

var _autobind2 = _interopRequireDefault(_autobind);

var _dynamicPosition = require('../utils/dynamic-position');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var propTypes = {
  // Longitude of the anchor point
  longitude: _propTypes2.default.number.isRequired,
  // Latitude of the anchor point
  latitude: _propTypes2.default.number.isRequired,
  // Offset from the left
  offsetLeft: _propTypes2.default.number,
  // Offset from the top
  offsetTop: _propTypes2.default.number,
  // Size of the tip
  tipSize: _propTypes2.default.number,
  // Whether to show close button
  closeButton: _propTypes2.default.bool,
  // Whether to close on click
  closeOnClick: _propTypes2.default.bool,
  // The popup's location relative to the coordinate
  anchor: _propTypes2.default.oneOf((0, _keys2.default)(_dynamicPosition.ANCHOR_POSITION)),
  // Whether the popup anchor should be auto-adjusted to fit within the container
  dynamicPosition: _propTypes2.default.bool,
  // Callback when component is closed
  onClose: _propTypes2.default.func
}; // Copyright (c) 2015 Uber Technologies, Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.


var defaultProps = {
  offsetLeft: 0,
  offsetTop: 0,
  tipSize: 10,
  anchor: 'bottom',
  dynamicPosition: true,
  closeButton: true,
  closeOnClick: true,
  onClose: function onClose() {}
};

var contextTypes = {
  viewport: _propTypes2.default.instanceOf(_viewportMercatorProject.PerspectiveMercatorViewport)
};

/*
 * PureComponent doesn't update when context changes.
 * The only way is to implement our own shouldComponentUpdate here. Considering
 * the parent component (StaticMap or InteractiveMap) is pure, and map re-render
 * is almost always triggered by a viewport change, we almost definitely need to
 * recalculate the popup's position when the parent re-renders.
 */

var Popup = function (_Component) {
  (0, _inherits3.default)(Popup, _Component);

  function Popup(props) {
    (0, _classCallCheck3.default)(this, Popup);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Popup.__proto__ || (0, _getPrototypeOf2.default)(Popup)).call(this, props));

    (0, _autobind2.default)(_this);
    return _this;
  }

  (0, _createClass3.default)(Popup, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      // Container just got a size, re-calculate position
      this.forceUpdate();
    }
  }, {
    key: '_getPosition',
    value: function _getPosition(x, y) {
      var viewport = this.context.viewport;
      var _props = this.props,
          anchor = _props.anchor,
          dynamicPosition = _props.dynamicPosition,
          tipSize = _props.tipSize;


      if (this._content) {
        return dynamicPosition ? (0, _dynamicPosition.getDynamicPosition)({
          x: x, y: y, anchor: anchor,
          padding: tipSize,
          width: viewport.width,
          height: viewport.height,
          selfWidth: this._content.clientWidth,
          selfHeight: this._content.clientHeight
        }) : anchor;
      }

      return anchor;
    }
  }, {
    key: '_onClose',
    value: function _onClose() {
      this.props.onClose();
    }
  }, {
    key: '_contentLoaded',
    value: function _contentLoaded(ref) {
      this._content = ref;
    }
  }, {
    key: '_renderTip',
    value: function _renderTip() {
      var tipSize = this.props.tipSize;


      return (0, _react.createElement)('div', {
        key: 'tip',
        className: 'mapboxgl-popup-tip',
        style: { borderWidth: tipSize }
      });
    }
  }, {
    key: '_renderContent',
    value: function _renderContent() {
      var _props2 = this.props,
          closeButton = _props2.closeButton,
          children = _props2.children;

      return (0, _react.createElement)('div', {
        key: 'content',
        ref: this._contentLoaded,
        className: 'mapboxgl-popup-content'
      }, [closeButton && (0, _react.createElement)('button', {
        key: 'close-button',
        className: 'mapboxgl-popup-close-button',
        type: 'button',
        onClick: this._onClose
      }, 'Ã—'), children]);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          longitude = _props3.longitude,
          latitude = _props3.latitude,
          offsetLeft = _props3.offsetLeft,
          offsetTop = _props3.offsetTop,
          closeOnClick = _props3.closeOnClick;

      var _context$viewport$pro = this.context.viewport.project([longitude, latitude]),
          _context$viewport$pro2 = (0, _slicedToArray3.default)(_context$viewport$pro, 2),
          x = _context$viewport$pro2[0],
          y = _context$viewport$pro2[1];

      var positionType = this._getPosition(x, y);
      var anchorPosition = _dynamicPosition.ANCHOR_POSITION[positionType];

      var containerStyle = {
        position: 'absolute',
        left: x + offsetLeft,
        top: y + offsetTop,
        transform: 'translate(' + -anchorPosition.x * 100 + '%, ' + -anchorPosition.y * 100 + '%)'
      };

      return (0, _react.createElement)('div', {
        className: 'mapboxgl-popup mapboxgl-popup-anchor-' + positionType,
        style: containerStyle,
        onClick: closeOnClick ? this._onClose : null
      }, [this._renderTip(), this._renderContent()]);
    }
  }]);
  return Popup;
}(_react.Component);

exports.default = Popup;


Popup.displayName = 'Popup';
Popup.propTypes = propTypes;
Popup.defaultProps = defaultProps;
Popup.contextTypes = contextTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnRzL3BvcHVwLmpzIl0sIm5hbWVzIjpbInByb3BUeXBlcyIsImxvbmdpdHVkZSIsIm51bWJlciIsImlzUmVxdWlyZWQiLCJsYXRpdHVkZSIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJ0aXBTaXplIiwiY2xvc2VCdXR0b24iLCJib29sIiwiY2xvc2VPbkNsaWNrIiwiYW5jaG9yIiwib25lT2YiLCJkeW5hbWljUG9zaXRpb24iLCJvbkNsb3NlIiwiZnVuYyIsImRlZmF1bHRQcm9wcyIsImNvbnRleHRUeXBlcyIsInZpZXdwb3J0IiwiaW5zdGFuY2VPZiIsIlBvcHVwIiwicHJvcHMiLCJmb3JjZVVwZGF0ZSIsIngiLCJ5IiwiY29udGV4dCIsIl9jb250ZW50IiwicGFkZGluZyIsIndpZHRoIiwiaGVpZ2h0Iiwic2VsZldpZHRoIiwiY2xpZW50V2lkdGgiLCJzZWxmSGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwicmVmIiwia2V5IiwiY2xhc3NOYW1lIiwic3R5bGUiLCJib3JkZXJXaWR0aCIsImNoaWxkcmVuIiwiX2NvbnRlbnRMb2FkZWQiLCJ0eXBlIiwib25DbGljayIsIl9vbkNsb3NlIiwicHJvamVjdCIsInBvc2l0aW9uVHlwZSIsIl9nZXRQb3NpdGlvbiIsImFuY2hvclBvc2l0aW9uIiwiY29udGFpbmVyU3R5bGUiLCJwb3NpdGlvbiIsImxlZnQiLCJ0b3AiLCJ0cmFuc2Zvcm0iLCJfcmVuZGVyVGlwIiwiX3JlbmRlckNvbnRlbnQiLCJkaXNwbGF5TmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQTs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBRUE7Ozs7QUFFQSxJQUFNQSxZQUFZO0FBQ2hCO0FBQ0FDLGFBQVcsb0JBQVVDLE1BQVYsQ0FBaUJDLFVBRlo7QUFHaEI7QUFDQUMsWUFBVSxvQkFBVUYsTUFBVixDQUFpQkMsVUFKWDtBQUtoQjtBQUNBRSxjQUFZLG9CQUFV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Q29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTUgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cblxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuaW1wb3J0IHtDb21wb25lbnQsIGNyZWF0ZUVsZW1lbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQge1BlcnNwZWN0aXZlTWVyY2F0b3JWaWV3cG9ydH0gZnJvbSAndmlld3BvcnQtbWVyY2F0b3ItcHJvamVjdCc7XG5pbXBvcnQgYXV0b2JpbmQgZnJvbSAnLi4vdXRpbHMvYXV0b2JpbmQnO1xuXG5pbXBvcnQge2dldER5bmFtaWNQb3NpdGlvbiwgQU5DSE9SX1BPU0lUSU9OfSBmcm9tICcuLi91dGlscy9keW5hbWljLXBvc2l0aW9uJztcblxuY29uc3QgcHJvcFR5cGVzID0ge1xuICAvLyBMb25naXR1ZGUgb2YgdGhlIGFuY2hvciBwb2ludFxuICBsb25naXR1ZGU6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgLy8gTGF0aXR1ZGUgb2YgdGhlIGFuY2hvciBwb2ludFxuICBsYXRpdHVkZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAvLyBPZmZzZXQgZnJvbSB0aGUgbGVmdFxuICBvZmZzZXRMZWZ0OiBQcm9wVHlwZXMubnVtYmVyLFxuICAvLyBPZmZzZXQgZnJvbSB0aGUgdG9wXG4gIG9mZnNldFRvcDogUHJvcFR5cGVzLm51bWJlcixcbiAgLy8gU2l6ZSBvZiB0aGUgdGlwXG4gIHRpcFNpemU6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8vIFdoZXRoZXIgdG8gc2hvdyBjbG9zZSBidXR0b25cbiAgY2xvc2VCdXR0b246IFByb3BUeXBlcy5ib29sLFxuICAvLyBXaGV0aGVyIHRvIGNsb3NlIG9uIGNsaWNrXG4gIGNsb3NlT25DbGljazogUHJvcFR5cGVzLmJvb2wsXG4gIC8vIFRoZSBwb3B1cCdzIGxvY2F0aW9uIHJlbGF0aXZlIHRvIHRoZSBjb29yZGluYXRlXG4gIGFuY2hvcjogUHJvcFR5cGVzLm9uZU9mKE9iamVjdC5rZXlzKEFOQ0hPUl9QT1NJVElPTikpLFxuICAvLyBXaGV0aGVyIHRoZSBwb3B1cCBhbmNob3Igc2hvdWxkIGJlIGF1dG8tYWRqdXN0ZWQgdG8gZml0IHdpdGhpbiB0aGUgY29udGFpbmVyXG4gIGR5bmFtaWNQb3NpdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8vIENhbGxiYWNrIHdoZW4gY29tcG9uZW50IGlzIGNsb3NlZFxuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuY1xufTtcblxuY29uc3QgZGVmYXVsdFByb3BzID0ge1xuICBvZmZzZXRMZWZ0OiAwLFxuICBvZmZzZXRUb3A6IDAsXG4gIHRpcFNpemU6IDEwLFxuICBhbmNob3I6ICdib3R0b20nLFxuICBkeW5hbWljUG9zaXRpb246IHRydWUsXG4gIGNsb3NlQnV0dG9uOiB0cnVlLFxuICBjbG9zZU9uQ2xpY2s6IHRydWUsXG4gIG9uQ2xvc2U6ICgpID0+IHt9XG59O1xuXG5jb25zdCBjb250ZXh0VHlwZXMgPSB7XG4gIHZpZXdwb3J0OiBQcm9wVHlwZXMuaW5zdGFuY2VPZihQZXJzcGVjdGl2ZU1lcmNhdG9yVmlld3BvcnQpXG59O1xuXG4vKlxuICogUHVyZUNvbXBvbmVudCBkb2Vzbid0IHVwZGF0ZSB3aGVuIGNvbnRleHQgY2hhbmdlcy5cbiAqIFRoZSBvbmx5IHdheSBpcyB0byBpbXBsZW1lbnQgb3VyIG93biBzaG91bGRDb21wb25lbnRVcGRhdGUgaGVyZS4gQ29uc2lkZXJpbmdcbiAqIHRoZSBwYXJlbnQgY29tcG9uZW50IChTdGF0aWNNYXAgb3IgSW50ZXJhY3RpdmVNYXApIGlzIHB1cmUsIGFuZCBtYXAgcmUtcmVuZGVyXG4gKiBpcyBhbG1vc3QgYWx3YXlzIHRyaWdnZXJlZCBieSBhIHZpZXdwb3J0IGNoYW5nZSwgd2UgYWxtb3N0IGRlZmluaXRlbHkgbmVlZCB0b1xuICogcmVjYWxjdWxhdGUgdGhlIHBvcHVwJ3MgcG9zaXRpb24gd2hlbiB0aGUgcGFyZW50IHJlLXJlbmRlcnMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICBhdXRvYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIC8vIENvbnRhaW5lciBqdXN0IGdvdCBhIHNpemUsIHJlLWNhbGN1bGF0ZSBwb3NpdGlvblxuICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgfVxuXG4gIF9nZXRQb3NpdGlvbih4LCB5KSB7XG4gICAgY29uc3Qge3ZpZXdwb3J0fSA9IHRoaXMuY29udGV4dDtcbiAgICBjb25zdCB7YW5jaG9yLCBkeW5hbWljUG9zaXRpb24sIHRpcFNpemV9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICh0aGlzLl9jb250ZW50KSB7XG4gICAgICByZXR1cm4gZHluYW1pY1Bvc2l0aW9uID8gZ2V0RHluYW1pY1Bvc2l0aW9uKHtcbiAgICAgICAgeCwgeSwgYW5jaG9yLFxuICAgICAgICBwYWRkaW5nOiB0aXBTaXplLFxuICAgICAgICB3aWR0aDogdmlld3BvcnQud2lkdGgsXG4gICAgICAgIGhlaWdodDogdmlld3BvcnQuaGVpZ2h0LFxuICAgICAgICBzZWxmV2lkdGg6IHRoaXMuX2NvbnRlbnQuY2xpZW50V2lkdGgsXG4gICAgICAgIHNlbGZIZWlnaHQ6IHRoaXMuX2NvbnRlbnQuY2xpZW50SGVpZ2h0XG4gICAgICB9KSA6IGFuY2hvcjtcbiAgICB9XG5cbiAgICByZXR1cm4gYW5jaG9yO1xuICB9XG5cbiAgX29uQ2xvc2UoKSB7XG4gICAgdGhpcy5wcm9wcy5vbkNsb3NlKCk7XG4gIH1cblxuICBfY29udGVudExvYWRlZChyZWYpIHtcbiAgICB0aGlzLl9jb250ZW50ID0gcmVmO1xuICB9XG5cbiAgX3JlbmRlclRpcCgpIHtcbiAgICBjb25zdCB7dGlwU2l6ZX0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGtleTogJ3RpcCcsXG4gICAgICBjbGFzc05hbWU6ICdtYXBib3hnbC1wb3B1cC10aXAnLFxuICAgICAgc3R5bGU6IHtib3JkZXJXaWR0aDogdGlwU2l6ZX1cbiAgICB9KTtcbiAgfVxuXG4gIF9yZW5kZXJDb250ZW50KCkge1xuICAgIGNvbnN0IHtjbG9zZUJ1dHRvbiwgY2hpbGRyZW59ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAga2V5OiAnY29udGVudCcsXG4gICAgICByZWY6IHRoaXMuX2NvbnRlbnRMb2FkZWQsXG4gICAgICBjbGFzc05hbWU6ICdtYXBib3hnbC1wb3B1cC1jb250ZW50J1xuICAgIH0sIFtcbiAgICAgIGNsb3NlQnV0dG9uICYmIGNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHtcbiAgICAgICAga2V5OiAnY2xvc2UtYnV0dG9uJyxcbiAgICAgICAgY2xhc3NOYW1lOiAnbWFwYm94Z2wtcG9wdXAtY2xvc2UtYnV0dG9uJyxcbiAgICAgICAgdHlwZTogJ2J1dHRvbicsXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuX29uQ2xvc2VcbiAgICAgIH0sICfDlycpLFxuICAgICAgY2hpbGRyZW5cbiAgICBdKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7bG9uZ2l0dWRlLCBsYXRpdHVkZSwgb2Zmc2V0TGVmdCwgb2Zmc2V0VG9wLCBjbG9zZU9uQ2xpY2t9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IFt4LCB5XSA9IHRoaXMuY29udGV4dC52aWV3cG9ydC5wcm9qZWN0KFtsb25naXR1ZGUsIGxhdGl0dWRlXSk7XG5cbiAgICBjb25zdCBwb3NpdGlvblR5cGUgPSB0aGlzLl9nZXRQb3NpdGlvbih4LCB5KTtcbiAgICBjb25zdCBhbmNob3JQb3NpdGlvbiA9IEFOQ0hPUl9QT1NJVElPTltwb3NpdGlvblR5cGVdO1xuXG4gICAgY29uc3QgY29udGFpbmVyU3R5bGUgPSB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGxlZnQ6IHggKyBvZmZzZXRMZWZ0LFxuICAgICAgdG9wOiB5ICsgb2Zmc2V0VG9wLFxuICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7LWFuY2hvclBvc2l0aW9uLnggKiAxMDB9JSwgJHstYW5jaG9yUG9zaXRpb24ueSAqIDEwMH0lKWBcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogYG1hcGJveGdsLXBvcHVwIG1hcGJveGdsLXBvcHVwLWFuY2hvci0ke3Bvc2l0aW9uVHlwZX1gLFxuICAgICAgc3R5bGU6IGNvbnRhaW5lclN0eWxlLFxuICAgICAgb25DbGljazogY2xvc2VPbkNsaWNrID8gdGhpcy5fb25DbG9zZSA6IG51bGxcbiAgICB9LCBbXG4gICAgICB0aGlzLl9yZW5kZXJUaXAoKSxcbiAgICAgIHRoaXMuX3JlbmRlckNvbnRlbnQoKVxuICAgIF0pO1xuICB9XG5cbn1cblxuUG9wdXAuZGlzcGxheU5hbWUgPSAnUG9wdXAnO1xuUG9wdXAucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuUG9wdXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuUG9wdXAuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuIl19