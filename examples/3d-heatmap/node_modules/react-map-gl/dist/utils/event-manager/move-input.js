'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MOUSE_EVENTS = ['mousedown', 'mousemove', 'mouseup'];
var EVENT_TYPE = 'pointermove';

/**
 * Hammer.js swallows 'move' events (for pointer/touch/mouse)
 * when the pointer is not down. This class sets up a handler
 * specifically for these events to work around this limitation.
 * Note that this could be extended to more intelligently handle
 * move events across input types, e.g. storing multiple simultaneous
 * pointer/touch events, calculating speed/direction, etc.
 */

var MoveInput = function () {
  function MoveInput(element, callback) {
    var _this = this;

    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    (0, _classCallCheck3.default)(this, MoveInput);

    this.element = element;
    this.callback = callback;
    this.pressed = false;

    var events = MOUSE_EVENTS.concat(options.events || []);
    this.options = (0, _assign2.default)({ enable: true }, options, { events: events });

    this.handleEvent = this.handleEvent.bind(this);
    this.options.events.forEach(function (event) {
      return element.addEventListener(event, _this.handleEvent);
    });
  }

  (0, _createClass3.default)(MoveInput, [{
    key: 'destroy',
    value: function destroy() {
      var _this2 = this;

      this.options.events.forEach(function (event) {
        return _this2.element.removeEventListener(event, _this2.handleEvent);
      });
    }
  }, {
    key: 'set',
    value: function set(options) {
      (0, _assign2.default)(this.options, options);
    }

    /**
     * Enable this input (begin processing events)
     * if the specified event type is among those handled by this input.
     */

  }, {
    key: 'toggleIfEventSupported',
    value: function toggleIfEventSupported(eventType, enabled) {
      if (EVENT_TYPE === eventType) {
        this.options.enable = enabled;
      }
    }
  }, {
    key: 'handleEvent',
    value: function handleEvent(event) {
      if (!this.options.enable) {
        return;
      }

      switch (event.type) {
        case 'mousedown':
          if (event.button === 0) {
            // Left button is down
            this.pressed = true;
          }
          break;
        case 'mousemove':
          // Move events use `which` to track the button being pressed
          if (event.which !== 1) {
            // Left button is not down
            this.pressed = false;
          }
          if (!this.pressed) {
            // Drag events are emitted by hammer already
            // we just need to emit the move event on hover
            this.callback({
              type: EVENT_TYPE,
              srcEvent: event,
              pointerType: 'mouse',
              target: event.target
            });
          }
          break;
        case 'mouseup':
          this.pressed = false;
          break;
        default:
      }
    }
  }]);
  return MoveInput;
}();

exports.default = MoveInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9ldmVudC1tYW5hZ2VyL21vdmUtaW5wdXQuanMiXSwibmFtZXMiOlsiTU9VU0VfRVZFTlRTIiwiRVZFTlRfVFlQRSIsIk1vdmVJbnB1dCIsImVsZW1lbnQiLCJjYWxsYmFjayIsIm9wdGlvbnMiLCJwcmVzc2VkIiwiZXZlbnRzIiwiY29uY2F0IiwiZW5hYmxlIiwiaGFuZGxlRXZlbnQiLCJiaW5kIiwiZm9yRWFjaCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJldmVudFR5cGUiLCJlbmFibGVkIiwidHlwZSIsImJ1dHRvbiIsIndoaWNoIiwic3JjRXZlbnQiLCJwb2ludGVyVHlwZSIsInRhcmdldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFNQSxlQUFlLENBQUMsV0FBRCxFQUFjLFdBQWQsRUFBMkIsU0FBM0IsQ0FBckI7QUFDQSxJQUFNQyxhQUFhLGFBQW5COztBQUVBOzs7Ozs7Ozs7SUFRcUJDLFM7QUFFbkIscUJBQVlDLE9BQVosRUFBcUJDLFFBQXJCLEVBQTZDO0FBQUE7O0FBQUEsUUFBZEMsT0FBYyx1RUFBSixFQUFJO0FBQUE7O0FBQzNDLFNBQUtGLE9BQUwsR0FBZUEsT0FBZjtBQUNBLFNBQUtDLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0EsU0FBS0UsT0FBTCxHQUFlLEtBQWY7O0FBRUEsUUFBTUMsU0FBU1AsYUFBYVEsTUFBYixDQUFvQkgsUUFBUUUsTUFBUixJQUFrQixFQUF0QyxDQUFmO0FBQ0EsU0FBS0YsT0FBTCxHQUFlLHNCQUFjLEVBQUNJLFFBQVEsSUFBVCxFQUFkLEVBQThCSixPQUE5QixFQUF1QyxFQUFDRSxjQUFELEVBQXZDLENBQWY7O0FBRUEsU0FBS0csV0FBTCxHQUFtQixLQUFLQSxXQUFMLENBQWlCQyxJQUFqQixDQUFzQixJQUF0QixDQUFuQjtBQUNBLFNBQUtOLE9BQUwsQ0FBYUUsTUFBYixDQUFvQkssT0FBcEIsQ0FBNEI7QUFBQSxhQUFTVCxRQUFRVSxnQkFBUixDQUF5QkMsS0FBekIsRUFBZ0MsTUFBS0osV0FBckMsQ0FBVDtBQUFBLEtBQTVCO0FBQ0Q7Ozs7OEJBRVM7QUFBQTs7QUFDUixXQUFLTCxPQUFMLENBQWFFLE1BQWIsQ0FBb0JLLE9BQXBCLENBQTRCO0FBQUEsZUFBUyxPQUFLVCxPQUFMLENBQWFZLG1CQUFiLENBQWlDRCxLQUFqQyxFQUF3QyxPQUFLSixXQUE3QyxDQUFUO0FBQUEsT0FBNUI7QUFDRDs7O3dCQUVHTCxPLEVBQVM7QUFDWCw0QkFBYyxLQUFLQSxPQUFuQixFQUE0QkEsT0FBNUI7QUFDRDs7QUFFRDs7Ozs7OzsyQ0FJdUJXLFMsRUFBV0MsTyxFQUFTO0FBQ3pDLFVBQUloQixlQUFlZSxTQUFuQixFQUE4QjtBQUM1QixhQUFLWCxPQUFMLENBQWFJLE1BQWIsR0FBc0JRLE9BQXRCO0FBQ0Q7QUFDRjs7O2dDQUVXSCxLLEVBQU87QUFDakIsVUFBSSxDQUFDLEtBQUtULE9BQUwsQ0FBYUksTUFBbEIsRUFBMEI7QUFDeEI7QUFDRDs7QUFFRCxjQUFRSyxNQUFNSSxJQUFkO0FBQ0EsYUFBSyxXQUFMO0FBQ0UsY0FBSUosTUFBTUssTUFBTixLQUFpQixDQUFyQixFQUF3QjtBQUN0QjtBQUNBLGlCQUFLYixPQUFMLEdBQWUsSUFBZjtBQUNEO0FBQ0Q7QUFDRixhQUFLLFdBQUw7QUFDRTtBQUNBLGNBQUlRLE1BQU1NLEtBQU4sS0FBZ0IsQ0FBcEIsRUFBdUI7QUFDckI7QUFDQSxpQkFBS2QsT0FBTCxHQUFlLEtBQWY7QUFDRDtBQUNELGNBQUksQ0FBQyxLQUFLQSxPQUFWLEVBQW1CO0FBQ2pCO0FBQ0E7QUFDQSxpQkFBS0YsUUFBTCxDQUFjO0FBQ1pjLG9CQUFNakIsVUFETTtBQUVab0Isd0JBQVVQLEtBRkU7QUFHWlEsMkJBQWEsT0FIRDtBQUlaQyxzQkFBUVQsTUFBTVM7QUFKRixhQUFkO0FBTUQ7QUFDRDtBQUNGLGFBQUssU0FBTDtBQUNFLGVBQUtqQixPQUFMLEdBQWUsS0FBZjtBQUNBO0FBQ0Y7QUEzQkE7QUE2QkQ7Ozs7O2tCQWxFa0JKLFMiLCJmaWxlIjoibW92ZS1pbnB1dC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE1PVVNFX0VWRU5UUyA9IFsnbW91c2Vkb3duJywgJ21vdXNlbW92ZScsICdtb3VzZXVwJ107XG5jb25zdCBFVkVOVF9UWVBFID0gJ3BvaW50ZXJtb3ZlJztcblxuLyoqXG4gKiBIYW1tZXIuanMgc3dhbGxvd3MgJ21vdmUnIGV2ZW50cyAoZm9yIHBvaW50ZXIvdG91Y2gvbW91c2UpXG4gKiB3aGVuIHRoZSBwb2ludGVyIGlzIG5vdCBkb3duLiBUaGlzIGNsYXNzIHNldHMgdXAgYSBoYW5kbGVyXG4gKiBzcGVjaWZpY2FsbHkgZm9yIHRoZXNlIGV2ZW50cyB0byB3b3JrIGFyb3VuZCB0aGlzIGxpbWl0YXRpb24uXG4gKiBOb3RlIHRoYXQgdGhpcyBjb3VsZCBiZSBleHRlbmRlZCB0byBtb3JlIGludGVsbGlnZW50bHkgaGFuZGxlXG4gKiBtb3ZlIGV2ZW50cyBhY3Jvc3MgaW5wdXQgdHlwZXMsIGUuZy4gc3RvcmluZyBtdWx0aXBsZSBzaW11bHRhbmVvdXNcbiAqIHBvaW50ZXIvdG91Y2ggZXZlbnRzLCBjYWxjdWxhdGluZyBzcGVlZC9kaXJlY3Rpb24sIGV0Yy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW92ZUlucHV0IHtcblxuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjYWxsYmFjaywgb3B0aW9ucyA9IHt9KSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgdGhpcy5wcmVzc2VkID0gZmFsc2U7XG5cbiAgICBjb25zdCBldmVudHMgPSBNT1VTRV9FVkVOVFMuY29uY2F0KG9wdGlvbnMuZXZlbnRzIHx8IFtdKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtlbmFibGU6IHRydWV9LCBvcHRpb25zLCB7ZXZlbnRzfSk7XG5cbiAgICB0aGlzLmhhbmRsZUV2ZW50ID0gdGhpcy5oYW5kbGVFdmVudC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub3B0aW9ucy5ldmVudHMuZm9yRWFjaChldmVudCA9PiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIHRoaXMuaGFuZGxlRXZlbnQpKTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5vcHRpb25zLmV2ZW50cy5mb3JFYWNoKGV2ZW50ID0+IHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCB0aGlzLmhhbmRsZUV2ZW50KSk7XG4gIH1cblxuICBzZXQob3B0aW9ucykge1xuICAgIE9iamVjdC5hc3NpZ24odGhpcy5vcHRpb25zLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmFibGUgdGhpcyBpbnB1dCAoYmVnaW4gcHJvY2Vzc2luZyBldmVudHMpXG4gICAqIGlmIHRoZSBzcGVjaWZpZWQgZXZlbnQgdHlwZSBpcyBhbW9uZyB0aG9zZSBoYW5kbGVkIGJ5IHRoaXMgaW5wdXQuXG4gICAqL1xuICB0b2dnbGVJZkV2ZW50U3VwcG9ydGVkKGV2ZW50VHlwZSwgZW5hYmxlZCkge1xuICAgIGlmIChFVkVOVF9UWVBFID09PSBldmVudFR5cGUpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5lbmFibGUgPSBlbmFibGVkO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUV2ZW50KGV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuZW5hYmxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgY2FzZSAnbW91c2Vkb3duJzpcbiAgICAgIGlmIChldmVudC5idXR0b24gPT09IDApIHtcbiAgICAgICAgLy8gTGVmdCBidXR0b24gaXMgZG93blxuICAgICAgICB0aGlzLnByZXNzZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbW91c2Vtb3ZlJzpcbiAgICAgIC8vIE1vdmUgZXZlbnRzIHVzZSBgd2hpY2hgIHRvIHRyYWNrIHRoZSBidXR0b24gYmVpbmcgcHJlc3NlZFxuICAgICAgaWYgKGV2ZW50LndoaWNoICE9PSAxKSB7XG4gICAgICAgIC8vIExlZnQgYnV0dG9uIGlzIG5vdCBkb3duXG4gICAgICAgIHRoaXMucHJlc3NlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLnByZXNzZWQpIHtcbiAgICAgICAgLy8gRHJhZyBldmVudHMgYXJlIGVtaXR0ZWQgYnkgaGFtbWVyIGFscmVhZHlcbiAgICAgICAgLy8gd2UganVzdCBuZWVkIHRvIGVtaXQgdGhlIG1vdmUgZXZlbnQgb24gaG92ZXJcbiAgICAgICAgdGhpcy5jYWxsYmFjayh7XG4gICAgICAgICAgdHlwZTogRVZFTlRfVFlQRSxcbiAgICAgICAgICBzcmNFdmVudDogZXZlbnQsXG4gICAgICAgICAgcG9pbnRlclR5cGU6ICdtb3VzZScsXG4gICAgICAgICAgdGFyZ2V0OiBldmVudC50YXJnZXRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdtb3VzZXVwJzpcbiAgICAgIHRoaXMucHJlc3NlZCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICB9XG4gIH1cbn1cbiJdfQ==