{"version":3,"sources":["../../../../src/packages/math/src/spherical-coordinates.js"],"names":["vec3_length","vec3_add","vec3_rotateX","vec3_rotateY","EARTH_RADIUS_METERS","EPSILON","radians","fromDegrees","Math","PI","degrees","fromRadians","clamp","x","min","max","SphericalCoordinates","phi","theta","radius","radiusScale","check","constructor","copy","other","lng","lat","z","v","atan2","acos","center","distance"],"mappings":"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","file":"spherical-coordinates.js","sourcesContent":["/* eslint-disable camelcase */\nimport vec3_length from 'gl-vec3/length';\nimport vec3_add from 'gl-vec3/add';\nimport vec3_rotateX from 'gl-vec3/lerp';\nimport vec3_rotateY from 'gl-vec3/lerp';\n\nconst EARTH_RADIUS_METERS = 6.371e6;\nconst EPSILON = 0.000001;\n\nexport function radians(fromDegrees) {\n  return fromDegrees / 180 * Math.PI;\n}\n\nexport function degrees(fromRadians) {\n  return fromRadians * 180 / Math.PI;\n}\n\n// constrain number between bounds\nexport function clamp(x, min, max) {\n  if (x < min) {\n    return min;\n  }\n  if (x > max) {\n    return max;\n  }\n  return x;\n  // return Math.min(Math.max(value, min), max);\n}\n\nexport default class SphericalCoordinates {\n\n  /**\n   * Inspired by THREE.js Spherical class\n   * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n   * The poles (phi) are at the positive and negative y axis.\n   * The equator starts at positive z.\n   * @class\n   * @param {Number} phi=0 - rotation around X (latitude)\n   * @param {Number} theta=0 - rotation around Y (longitude)\n   * @param {Number} radius=1 - Distance from center\n   */\n  constructor(phi = 0, theta = 0, radius = 1.0, radiusScale = EARTH_RADIUS_METERS) {\n    this.phi = phi;         // up / down towards top and bottom pole\n    this.theta = theta;     // around the equator of the sphere\n    this.radius = radius;   // radial distance from center\n    this.radiusScale = radiusScale; // Used by lngLatZ\n    this.check();\n    return this;\n  }\n\n  set(radius, phi, theta) {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    this.check();\n    return this;\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  copy(other) {\n    this.radius = other.radius;\n    this.phi = other.phi;\n    this.theta = other.theta;\n    this.check();\n    return this;\n  }\n\n  fromLngLatZ([lng, lat, z]) {\n    this.radius = 1 + z / this.radiusScale;\n    this.phi = radians(lat);\n    this.theta = radians(lng);\n  }\n\n  fromVector3(v) {\n    this.radius = vec3_length(v);\n    if (this.radius === 0) {\n      this.theta = 0;\n      this.phi = 0;\n    } else {\n      this.theta = Math.atan2(v[0], v[1]); // equator angle around y-up axis\n      this.phi = Math.acos(clamp(v[2] / this.radius, -1, 1)); // polar angle\n    }\n    return this;\n  }\n\n  // restrict phi to be betwee EPS and PI-EPS\n  makeSafe() {\n    this.phi = Math.max(EPSILON, Math.min(Math.PI - EPSILON, this.phi));\n    return this;\n  }\n\n  /* eslint-disable brace-style */\n\n  // Standard spherical coordinates\n  get phi() { return this.phi; }\n  get theta() { return this.theta; }\n  get radius() { return this.radius; }\n  get altitude() { return this.radius - 1; } // relative altitude\n\n  // lnglatZ coordinates\n  get lng() { return degrees(this.phi); }\n  get lat() { return degrees(this.theta); }\n  get z() { return (this.radius - 1) * this.radiusScale; }\n\n  // TODO - add parameter for orientation of sphere? up vector etc?\n  toVector3(center = [0, 0, 0]) {\n    const v = vec3_add([], center, [0, 0, this.distance]);\n    vec3_rotateX(v, v, center, this.theta);\n    vec3_rotateY(v, v, center, this.phi);\n    return v;\n  }\n\n  check() {\n    return true;\n  }\n}\n"]}