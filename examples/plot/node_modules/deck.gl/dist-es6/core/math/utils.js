import vec4_multiply from 'gl-vec4/multiply';
import vec4_transformMat4 from 'gl-vec4/transformMat4';

export function transformVector(matrix, vector) {
  // Handle non-invertible matrix
  if (!matrix) {
    return null;
  }
  var result = vec4_transformMat4([0, 0, 0, 0], vector, matrix);
  var scale = 1 / result[3];
  vec4_multiply(result, result, [scale, scale, scale, scale]);
  return result;
}

// Helper, avoids low-precision 32 bit matrices from gl-matrix mat4.create()
export function createMat4() {
  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
}

// Extract camera vectors (move to math library?)
export function extractCameraVectors(_ref) {
  var viewMatrix = _ref.viewMatrix,
      viewMatrixInverse = _ref.viewMatrixInverse;

  // Read the translation from the inverse view matrix
  return {
    eye: [viewMatrixInverse[12], viewMatrixInverse[13], viewMatrixInverse[14]],
    direction: [viewMatrix[2], viewMatrix[6], viewMatrix[10]],
    up: [viewMatrix[1], viewMatrix[5], viewMatrix[9]]
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3JlL21hdGgvdXRpbHMuanMiXSwibmFtZXMiOlsidmVjNF9tdWx0aXBseSIsInZlYzRfdHJhbnNmb3JtTWF0NCIsInRyYW5zZm9ybVZlY3RvciIsIm1hdHJpeCIsInZlY3RvciIsInJlc3VsdCIsInNjYWxlIiwiY3JlYXRlTWF0NCIsImV4dHJhY3RDYW1lcmFWZWN0b3JzIiwidmlld01hdHJpeCIsInZpZXdNYXRyaXhJbnZlcnNlIiwiZXllIiwiZGlyZWN0aW9uIiwidXAiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLGFBQVAsTUFBMEIsa0JBQTFCO0FBQ0EsT0FBT0Msa0JBQVAsTUFBK0IsdUJBQS9COztBQUVBLE9BQU8sU0FBU0MsZUFBVCxDQUF5QkMsTUFBekIsRUFBaUNDLE1BQWpDLEVBQXlDO0FBQzlDO0FBQ0EsTUFBSSxDQUFDRCxNQUFMLEVBQWE7QUFDWCxXQUFPLElBQVA7QUFDRDtBQUNELE1BQU1FLFNBQVNKLG1CQUFtQixDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsQ0FBbkIsRUFBaUNHLE1BQWpDLEVBQXlDRCxNQUF6QyxDQUFmO0FBQ0EsTUFBTUcsUUFBUSxJQUFJRCxPQUFPLENBQVAsQ0FBbEI7QUFDQUwsZ0JBQWNLLE1BQWQsRUFBc0JBLE1BQXRCLEVBQThCLENBQUNDLEtBQUQsRUFBUUEsS0FBUixFQUFlQSxLQUFmLEVBQXNCQSxLQUF0QixDQUE5QjtBQUNBLFNBQU9ELE1BQVA7QUFDRDs7QUFFRDtBQUNBLE9BQU8sU0FBU0UsVUFBVCxHQUFzQjtBQUMzQixTQUFPLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixFQUFhLENBQWIsRUFBZ0IsQ0FBaEIsRUFBbUIsQ0FBbkIsRUFBc0IsQ0FBdEIsRUFBeUIsQ0FBekIsRUFBNEIsQ0FBNUIsRUFBK0IsQ0FBL0IsRUFBa0MsQ0FBbEMsRUFBcUMsQ0FBckMsRUFBd0MsQ0FBeEMsRUFBMkMsQ0FBM0MsRUFBOEMsQ0FBOUMsQ0FBUDtBQUNEOztBQUVEO0FBQ0EsT0FBTyxTQUFTQyxvQkFBVCxPQUErRDtBQUFBLE1BQWhDQyxVQUFnQyxRQUFoQ0EsVUFBZ0M7QUFBQSxNQUFwQkMsaUJBQW9CLFFBQXBCQSxpQkFBb0I7O0FBQ3BFO0FBQ0EsU0FBTztBQUNMQyxTQUFLLENBQUNELGtCQUFrQixFQUFsQixDQUFELEVBQXdCQSxrQkFBa0IsRUFBbEIsQ0FBeEIsRUFBK0NBLGtCQUFrQixFQUFsQixDQUEvQyxDQURBO0FBRUxFLGVBQVcsQ0FBQ0gsV0FBVyxDQUFYLENBQUQsRUFBZ0JBLFdBQVcsQ0FBWCxDQUFoQixFQUErQkEsV0FBVyxFQUFYLENBQS9CLENBRk47QUFHTEksUUFBSSxDQUFDSixXQUFXLENBQVgsQ0FBRCxFQUFnQkEsV0FBVyxDQUFYLENBQWhCLEVBQStCQSxXQUFXLENBQVgsQ0FBL0I7QUFIQyxHQUFQO0FBS0QiLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdmVjNF9tdWx0aXBseSBmcm9tICdnbC12ZWM0L211bHRpcGx5JztcbmltcG9ydCB2ZWM0X3RyYW5zZm9ybU1hdDQgZnJvbSAnZ2wtdmVjNC90cmFuc2Zvcm1NYXQ0JztcblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybVZlY3RvcihtYXRyaXgsIHZlY3Rvcikge1xuICAvLyBIYW5kbGUgbm9uLWludmVydGlibGUgbWF0cml4XG4gIGlmICghbWF0cml4KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgcmVzdWx0ID0gdmVjNF90cmFuc2Zvcm1NYXQ0KFswLCAwLCAwLCAwXSwgdmVjdG9yLCBtYXRyaXgpO1xuICBjb25zdCBzY2FsZSA9IDEgLyByZXN1bHRbM107XG4gIHZlYzRfbXVsdGlwbHkocmVzdWx0LCByZXN1bHQsIFtzY2FsZSwgc2NhbGUsIHNjYWxlLCBzY2FsZV0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyBIZWxwZXIsIGF2b2lkcyBsb3ctcHJlY2lzaW9uIDMyIGJpdCBtYXRyaWNlcyBmcm9tIGdsLW1hdHJpeCBtYXQ0LmNyZWF0ZSgpXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTWF0NCgpIHtcbiAgcmV0dXJuIFsxLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAxXTtcbn1cblxuLy8gRXh0cmFjdCBjYW1lcmEgdmVjdG9ycyAobW92ZSB0byBtYXRoIGxpYnJhcnk/KVxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RDYW1lcmFWZWN0b3JzKHt2aWV3TWF0cml4LCB2aWV3TWF0cml4SW52ZXJzZX0pIHtcbiAgLy8gUmVhZCB0aGUgdHJhbnNsYXRpb24gZnJvbSB0aGUgaW52ZXJzZSB2aWV3IG1hdHJpeFxuICByZXR1cm4ge1xuICAgIGV5ZTogW3ZpZXdNYXRyaXhJbnZlcnNlWzEyXSwgdmlld01hdHJpeEludmVyc2VbMTNdLCB2aWV3TWF0cml4SW52ZXJzZVsxNF1dLFxuICAgIGRpcmVjdGlvbjogW3ZpZXdNYXRyaXhbMl0sIHZpZXdNYXRyaXhbNl0sIHZpZXdNYXRyaXhbMTBdXSxcbiAgICB1cDogW3ZpZXdNYXRyaXhbMV0sIHZpZXdNYXRyaXhbNV0sIHZpZXdNYXRyaXhbOV1dXG4gIH07XG59XG4iXX0=