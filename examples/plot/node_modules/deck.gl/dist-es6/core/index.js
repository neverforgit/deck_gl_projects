// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* eslint-disable max-len */

// Core Library
export { COORDINATE_SYSTEM } from './lib/constants';
export { default as LayerManager } from './lib/layer-manager';
export { default as AttributeManager } from './lib/attribute-manager';
export { default as Layer } from './lib/layer';
export { default as CompositeLayer } from './lib/composite-layer';

// Viewports
export { default as Viewport } from './viewports/viewport';
export { default as FirstPersonViewport } from './viewports/first-person-viewport';
export { default as ThirdPersonViewport } from './viewports/third-person-viewport';
export { default as WebMercatorViewport } from './viewports/web-mercator-viewport';

// TODO - Do we need to export? Move to experimental?
export { default as ViewportControls } from './controllers/controls';
export { default as FirstPersonState } from './controllers/first-person-state';
export { default as OrbitState } from './controllers/orbit-state';
export { default as MapState } from './controllers/map-state';

// Experimental Pure JS (non-React) bindings
import { default as DeckGLJS } from './pure-js/deck';
import { default as MapControllerJS } from './pure-js/map-controller';

// Experimental Features (May change in minor version bumps, use at your own risk)
import { get } from './lib/utils/get';
import { count } from './lib/utils/count';
import { default as EffectManager } from './experimental/lib/effect-manager';
import { default as Effect } from './experimental/lib/effect';

import { default as BinSorter } from './utils/bin-sorter';
import { linearScale } from './utils/scale-utils';
import { quantizeScale } from './utils/scale-utils';
import { clamp } from './utils/scale-utils';
import { defaultColorRange } from './utils/color-utils';

// TODO - just expose as layer methods instead?
import { enable64bitSupport } from './lib/utils/fp64';
import { fp64ify } from './lib/utils/fp64';

export var experimental = {
  BinSorter: BinSorter,
  linearScale: linearScale,
  quantizeScale: quantizeScale,
  clamp: clamp,
  defaultColorRange: defaultColorRange,

  get: get,
  count: count,

  enable64bitSupport: enable64bitSupport,
  fp64ify: fp64ify,

  EffectManager: EffectManager,
  Effect: Effect,

  DeckGLJS: DeckGLJS,
  MapControllerJS: MapControllerJS
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JlL2luZGV4LmpzIl0sIm5hbWVzIjpbIkNPT1JESU5BVEVfU1lTVEVNIiwiZGVmYXVsdCIsIkxheWVyTWFuYWdlciIsIkF0dHJpYnV0ZU1hbmFnZXIiLCJMYXllciIsIkNvbXBvc2l0ZUxheWVyIiwiVmlld3BvcnQiLCJGaXJzdFBlcnNvblZpZXdwb3J0IiwiVGhpcmRQZXJzb25WaWV3cG9ydCIsIldlYk1lcmNhdG9yVmlld3BvcnQiLCJWaWV3cG9ydENvbnRyb2xzIiwiRmlyc3RQZXJzb25TdGF0ZSIsIk9yYml0U3RhdGUiLCJNYXBTdGF0ZSIsIkRlY2tHTEpTIiwiTWFwQ29udHJvbGxlckpTIiwiZ2V0IiwiY291bnQiLCJFZmZlY3RNYW5hZ2VyIiwiRWZmZWN0IiwiQmluU29ydGVyIiwibGluZWFyU2NhbGUiLCJxdWFudGl6ZVNjYWxlIiwiY2xhbXAiLCJkZWZhdWx0Q29sb3JSYW5nZSIsImVuYWJsZTY0Yml0U3VwcG9ydCIsImZwNjRpZnkiLCJleHBlcmltZW50YWwiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFRQSxpQkFBUixRQUFnQyxpQkFBaEM7QUFDQSxTQUFRQyxXQUFXQyxZQUFuQixRQUFzQyxxQkFBdEM7QUFDQSxTQUFRRCxXQUFXRSxnQkFBbkIsUUFBMEMseUJBQTFDO0FBQ0EsU0FBUUYsV0FBV0csS0FBbkIsUUFBK0IsYUFBL0I7QUFDQSxTQUFRSCxXQUFXSSxjQUFuQixRQUF3Qyx1QkFBeEM7O0FBRUE7QUFDQSxTQUFRSixXQUFXSyxRQUFuQixRQUFrQyxzQkFBbEM7QUFDQSxTQUFRTCxXQUFXTSxtQkFBbkIsUUFBNkMsbUNBQTdDO0FBQ0EsU0FBUU4sV0FBV08sbUJBQW5CLFFBQTZDLG1DQUE3QztBQUNBLFNBQVFQLFdBQVdRLG1CQUFuQixRQUE2QyxtQ0FBN0M7O0FBRUE7QUFDQSxTQUFRUixXQUFXUyxnQkFBbkIsUUFBMEMsd0JBQTFDO0FBQ0EsU0FBUVQsV0FBV1UsZ0JBQW5CLFFBQTBDLGtDQUExQztBQUNBLFNBQVFWLFdBQVdXLFVBQW5CLFFBQW9DLDJCQUFwQztBQUNBLFNBQVFYLFdBQVdZLFFBQW5CLFFBQWtDLHlCQUFsQzs7QUFFQTtBQUNBLFNBQVFaLFdBQVdhLFFBQW5CLFFBQWtDLGdCQUFsQztBQUNBLFNBQVFiLFdBQVdjLGVBQW5CLFFBQXlDLDBCQUF6Qzs7QUFFQTtBQUNBLFNBQVFDLEdBQVIsUUFBa0IsaUJBQWxCO0FBQ0EsU0FBUUMsS0FBUixRQUFvQixtQkFBcEI7QUFDQSxTQUFRaEIsV0FBV2lCLGFBQW5CLFFBQXVDLG1DQUF2QztBQUNBLFNBQVFqQixXQUFXa0IsTUFBbkIsUUFBZ0MsMkJBQWhDOztBQUVBLFNBQVFsQixXQUFXbUIsU0FBbkIsUUFBbUMsb0JBQW5DO0FBQ0EsU0FBUUMsV0FBUixRQUEwQixxQkFBMUI7QUFDQSxTQUFRQyxhQUFSLFFBQTRCLHFCQUE1QjtBQUNBLFNBQVFDLEtBQVIsUUFBb0IscUJBQXBCO0FBQ0EsU0FBUUMsaUJBQVIsUUFBZ0MscUJBQWhDOztBQUVBO0FBQ0EsU0FBUUMsa0JBQVIsUUFBaUMsa0JBQWpDO0FBQ0EsU0FBUUMsT0FBUixRQUFzQixrQkFBdEI7O0FBRUEsT0FBTyxJQUFNQyxlQUFlO0FBQzFCUCxzQkFEMEI7QUFFMUJDLDBCQUYwQjtBQUcxQkMsOEJBSDBCO0FBSTFCQyxjQUowQjtBQUsxQkMsc0NBTDBCOztBQU8xQlIsVUFQMEI7QUFRMUJDLGNBUjBCOztBQVUxQlEsd0NBVjBCO0FBVzFCQyxrQkFYMEI7O0FBYTFCUiw4QkFiMEI7QUFjMUJDLGdCQWQwQjs7QUFnQjFCTCxvQkFoQjBCO0FBaUIxQkM7QUFqQjBCLENBQXJCIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE1IC0gMjAxNyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cbi8vIENvcmUgTGlicmFyeVxuZXhwb3J0IHtDT09SRElOQVRFX1NZU1RFTX0gZnJvbSAnLi9saWIvY29uc3RhbnRzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBMYXllck1hbmFnZXJ9IGZyb20gJy4vbGliL2xheWVyLW1hbmFnZXInO1xuZXhwb3J0IHtkZWZhdWx0IGFzIEF0dHJpYnV0ZU1hbmFnZXJ9IGZyb20gJy4vbGliL2F0dHJpYnV0ZS1tYW5hZ2VyJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBMYXllcn0gZnJvbSAnLi9saWIvbGF5ZXInO1xuZXhwb3J0IHtkZWZhdWx0IGFzIENvbXBvc2l0ZUxheWVyfSBmcm9tICcuL2xpYi9jb21wb3NpdGUtbGF5ZXInO1xuXG4vLyBWaWV3cG9ydHNcbmV4cG9ydCB7ZGVmYXVsdCBhcyBWaWV3cG9ydH0gZnJvbSAnLi92aWV3cG9ydHMvdmlld3BvcnQnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIEZpcnN0UGVyc29uVmlld3BvcnR9IGZyb20gJy4vdmlld3BvcnRzL2ZpcnN0LXBlcnNvbi12aWV3cG9ydCc7XG5leHBvcnQge2RlZmF1bHQgYXMgVGhpcmRQZXJzb25WaWV3cG9ydH0gZnJvbSAnLi92aWV3cG9ydHMvdGhpcmQtcGVyc29uLXZpZXdwb3J0JztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBXZWJNZXJjYXRvclZpZXdwb3J0fSBmcm9tICcuL3ZpZXdwb3J0cy93ZWItbWVyY2F0b3Itdmlld3BvcnQnO1xuXG4vLyBUT0RPIC0gRG8gd2UgbmVlZCB0byBleHBvcnQ/IE1vdmUgdG8gZXhwZXJpbWVudGFsP1xuZXhwb3J0IHtkZWZhdWx0IGFzIFZpZXdwb3J0Q29udHJvbHN9IGZyb20gJy4vY29udHJvbGxlcnMvY29udHJvbHMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIEZpcnN0UGVyc29uU3RhdGV9IGZyb20gJy4vY29udHJvbGxlcnMvZmlyc3QtcGVyc29uLXN0YXRlJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBPcmJpdFN0YXRlfSBmcm9tICcuL2NvbnRyb2xsZXJzL29yYml0LXN0YXRlJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBNYXBTdGF0ZX0gZnJvbSAnLi9jb250cm9sbGVycy9tYXAtc3RhdGUnO1xuXG4vLyBFeHBlcmltZW50YWwgUHVyZSBKUyAobm9uLVJlYWN0KSBiaW5kaW5nc1xuaW1wb3J0IHtkZWZhdWx0IGFzIERlY2tHTEpTfSBmcm9tICcuL3B1cmUtanMvZGVjayc7XG5pbXBvcnQge2RlZmF1bHQgYXMgTWFwQ29udHJvbGxlckpTfSBmcm9tICcuL3B1cmUtanMvbWFwLWNvbnRyb2xsZXInO1xuXG4vLyBFeHBlcmltZW50YWwgRmVhdHVyZXMgKE1heSBjaGFuZ2UgaW4gbWlub3IgdmVyc2lvbiBidW1wcywgdXNlIGF0IHlvdXIgb3duIHJpc2spXG5pbXBvcnQge2dldH0gZnJvbSAnLi9saWIvdXRpbHMvZ2V0JztcbmltcG9ydCB7Y291bnR9IGZyb20gJy4vbGliL3V0aWxzL2NvdW50JztcbmltcG9ydCB7ZGVmYXVsdCBhcyBFZmZlY3RNYW5hZ2VyfSBmcm9tICcuL2V4cGVyaW1lbnRhbC9saWIvZWZmZWN0LW1hbmFnZXInO1xuaW1wb3J0IHtkZWZhdWx0IGFzIEVmZmVjdH0gZnJvbSAnLi9leHBlcmltZW50YWwvbGliL2VmZmVjdCc7XG5cbmltcG9ydCB7ZGVmYXVsdCBhcyBCaW5Tb3J0ZXJ9IGZyb20gJy4vdXRpbHMvYmluLXNvcnRlcic7XG5pbXBvcnQge2xpbmVhclNjYWxlfSBmcm9tICcuL3V0aWxzL3NjYWxlLXV0aWxzJztcbmltcG9ydCB7cXVhbnRpemVTY2FsZX0gZnJvbSAnLi91dGlscy9zY2FsZS11dGlscyc7XG5pbXBvcnQge2NsYW1wfSBmcm9tICcuL3V0aWxzL3NjYWxlLXV0aWxzJztcbmltcG9ydCB7ZGVmYXVsdENvbG9yUmFuZ2V9IGZyb20gJy4vdXRpbHMvY29sb3ItdXRpbHMnO1xuXG4vLyBUT0RPIC0ganVzdCBleHBvc2UgYXMgbGF5ZXIgbWV0aG9kcyBpbnN0ZWFkP1xuaW1wb3J0IHtlbmFibGU2NGJpdFN1cHBvcnR9IGZyb20gJy4vbGliL3V0aWxzL2ZwNjQnO1xuaW1wb3J0IHtmcDY0aWZ5fSBmcm9tICcuL2xpYi91dGlscy9mcDY0JztcblxuZXhwb3J0IGNvbnN0IGV4cGVyaW1lbnRhbCA9IHtcbiAgQmluU29ydGVyLFxuICBsaW5lYXJTY2FsZSxcbiAgcXVhbnRpemVTY2FsZSxcbiAgY2xhbXAsXG4gIGRlZmF1bHRDb2xvclJhbmdlLFxuXG4gIGdldCxcbiAgY291bnQsXG5cbiAgZW5hYmxlNjRiaXRTdXBwb3J0LFxuICBmcDY0aWZ5LFxuXG4gIEVmZmVjdE1hbmFnZXIsXG4gIEVmZmVjdCxcblxuICBEZWNrR0xKUyxcbiAgTWFwQ29udHJvbGxlckpTXG59O1xuIl19