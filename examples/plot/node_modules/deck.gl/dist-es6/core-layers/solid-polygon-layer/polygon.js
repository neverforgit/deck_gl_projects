// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import { get, count } from '../../core/lib/utils';

// Basic polygon support
//
// Handles simple and complex polygons
// Simple polygons are arrays of vertices, implicitly "closed"
// Complex polygons are arrays of simple polygons, with the first polygon
// representing the outer hull and other polygons representing holes

/**
 * Check if this is a non-nested polygon (i.e. the first element of the first element is a number)
 * @param {Array} polygon - either a complex or simple polygon
 * @return {Boolean} - true if the polygon is a simple polygon (i.e. not an array of polygons)
 */
export function isSimple(polygon) {
  return count(polygon) >= 1 && count(get(polygon, 0)) >= 2 && Number.isFinite(get(get(polygon, 0), 0));
}

/**
 * Normalize to ensure that all polygons in a list are complex - simplifies processing
 * @param {Array} polygon - either a complex or a simple polygon
 * @param {Object} opts
 * @param {Object} opts.dimensions - if 3, the coords will be padded with 0's if needed
 * @return {Array} - returns a complex polygons
 */
export function normalize(polygon) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$dimensions = _ref.dimensions,
      dimensions = _ref$dimensions === undefined ? 3 : _ref$dimensions;

  return isSimple(polygon) ? [polygon] : polygon;
}

/**
 * Check if this is a non-nested polygon (i.e. the first element of the first element is a number)
 * @param {Array} polygon - either a complex or simple polygon
 * @return {Boolean} - true if the polygon is a simple polygon (i.e. not an array of polygons)
 */
export function getVertexCount(polygon) {
  return isSimple(polygon) ? count(polygon) : polygon.reduce(function (length, simplePolygon) {
    return length + count(simplePolygon);
  }, 0);
}

// Return number of triangles needed to tesselate the polygon
export function getTriangleCount(polygon) {
  var triangleCount = 0;
  var first = true;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = normalize(polygon)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var simplePolygon = _step.value;

      var size = count(simplePolygon);
      if (first) {
        triangleCount += size >= 3 ? size - 2 : 0;
      } else {
        triangleCount += size + 1;
      }
      first = false;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return triangleCount;
}

export function forEachVertex(polygon, visitor) {
  if (isSimple(polygon)) {
    polygon.forEach(visitor);
    return;
  }

  var vertexIndex = 0;
  polygon.forEach(function (simplePolygon) {
    simplePolygon.forEach(function (v, i, p) {
      return visitor(v, vertexIndex, polygon);
    });
    vertexIndex++;
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3JlLWxheWVycy9zb2xpZC1wb2x5Z29uLWxheWVyL3BvbHlnb24uanMiXSwibmFtZXMiOlsiZ2V0IiwiY291bnQiLCJpc1NpbXBsZSIsInBvbHlnb24iLCJOdW1iZXIiLCJpc0Zpbml0ZSIsIm5vcm1hbGl6ZSIsImRpbWVuc2lvbnMiLCJnZXRWZXJ0ZXhDb3VudCIsInJlZHVjZSIsImxlbmd0aCIsInNpbXBsZVBvbHlnb24iLCJnZXRUcmlhbmdsZUNvdW50IiwidHJpYW5nbGVDb3VudCIsImZpcnN0Iiwic2l6ZSIsImZvckVhY2hWZXJ0ZXgiLCJ2aXNpdG9yIiwiZm9yRWFjaCIsInZlcnRleEluZGV4IiwidiIsImkiLCJwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFRQSxHQUFSLEVBQWFDLEtBQWIsUUFBeUIsc0JBQXpCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7QUFLQSxPQUFPLFNBQVNDLFFBQVQsQ0FBa0JDLE9BQWxCLEVBQTJCO0FBQ2hDLFNBQU9GLE1BQU1FLE9BQU4sS0FBa0IsQ0FBbEIsSUFDTEYsTUFBTUQsSUFBSUcsT0FBSixFQUFhLENBQWIsQ0FBTixLQUEwQixDQURyQixJQUVMQyxPQUFPQyxRQUFQLENBQWdCTCxJQUFJQSxJQUFJRyxPQUFKLEVBQWEsQ0FBYixDQUFKLEVBQXFCLENBQXJCLENBQWhCLENBRkY7QUFHRDs7QUFFRDs7Ozs7OztBQU9BLE9BQU8sU0FBU0csU0FBVCxDQUFtQkgsT0FBbkIsRUFBbUQ7QUFBQSxpRkFBSixFQUFJO0FBQUEsNkJBQXRCSSxVQUFzQjtBQUFBLE1BQXRCQSxVQUFzQixtQ0FBVCxDQUFTOztBQUN4RCxTQUFPTCxTQUFTQyxPQUFULElBQW9CLENBQUNBLE9BQUQsQ0FBcEIsR0FBZ0NBLE9BQXZDO0FBQ0Q7O0FBRUQ7Ozs7O0FBS0EsT0FBTyxTQUFTSyxjQUFULENBQXdCTCxPQUF4QixFQUFpQztBQUN0QyxTQUFPRCxTQUFTQyxPQUFULElBQ0xGLE1BQU1FLE9BQU4sQ0FESyxHQUVMQSxRQUFRTSxNQUFSLENBQWUsVUFBQ0MsTUFBRCxFQUFTQyxhQUFUO0FBQUEsV0FBMkJELFNBQVNULE1BQU1VLGFBQU4sQ0FBcEM7QUFBQSxHQUFmLEVBQXlFLENBQXpFLENBRkY7QUFHRDs7QUFFRDtBQUNBLE9BQU8sU0FBU0MsZ0JBQVQsQ0FBMEJULE9BQTFCLEVBQW1DO0FBQ3hDLE1BQUlVLGdCQUFnQixDQUFwQjtBQUNBLE1BQUlDLFFBQVEsSUFBWjtBQUZ3QztBQUFBO0FBQUE7O0FBQUE7QUFHeEMseUJBQTRCUixVQUFVSCxPQUFWLENBQTVCLDhIQUFnRDtBQUFBLFVBQXJDUSxhQUFxQzs7QUFDOUMsVUFBTUksT0FBT2QsTUFBTVUsYUFBTixDQUFiO0FBQ0EsVUFBSUcsS0FBSixFQUFXO0FBQ1RELHlCQUFpQkUsUUFBUSxDQUFSLEdBQVlBLE9BQU8sQ0FBbkIsR0FBdUIsQ0FBeEM7QUFDRCxPQUZELE1BRU87QUFDTEYseUJBQWlCRSxPQUFPLENBQXhCO0FBQ0Q7QUFDREQsY0FBUSxLQUFSO0FBQ0Q7QUFYdUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFZeEMsU0FBT0QsYUFBUDtBQUNEOztBQUVELE9BQU8sU0FBU0csYUFBVCxDQUF1QmIsT0FBdkIsRUFBZ0NjLE9BQWhDLEVBQXlDO0FBQzlDLE1BQUlmLFNBQVNDLE9BQVQsQ0FBSixFQUF1QjtBQUNyQkEsWUFBUWUsT0FBUixDQUFnQkQsT0FBaEI7QUFDQTtBQUNEOztBQUVELE1BQUlFLGNBQWMsQ0FBbEI7QUFDQWhCLFVBQVFlLE9BQVIsQ0FBZ0IseUJBQWlCO0FBQy9CUCxrQkFBY08sT0FBZCxDQUFzQixVQUFDRSxDQUFELEVBQUlDLENBQUosRUFBT0MsQ0FBUDtBQUFBLGFBQWFMLFFBQVFHLENBQVIsRUFBV0QsV0FBWCxFQUF3QmhCLE9BQXhCLENBQWI7QUFBQSxLQUF0QjtBQUNBZ0I7QUFDRCxHQUhEO0FBSUQiLCJmaWxlIjoicG9seWdvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNSAtIDIwMTcgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQge2dldCwgY291bnR9IGZyb20gJy4uLy4uL2NvcmUvbGliL3V0aWxzJztcblxuLy8gQmFzaWMgcG9seWdvbiBzdXBwb3J0XG4vL1xuLy8gSGFuZGxlcyBzaW1wbGUgYW5kIGNvbXBsZXggcG9seWdvbnNcbi8vIFNpbXBsZSBwb2x5Z29ucyBhcmUgYXJyYXlzIG9mIHZlcnRpY2VzLCBpbXBsaWNpdGx5IFwiY2xvc2VkXCJcbi8vIENvbXBsZXggcG9seWdvbnMgYXJlIGFycmF5cyBvZiBzaW1wbGUgcG9seWdvbnMsIHdpdGggdGhlIGZpcnN0IHBvbHlnb25cbi8vIHJlcHJlc2VudGluZyB0aGUgb3V0ZXIgaHVsbCBhbmQgb3RoZXIgcG9seWdvbnMgcmVwcmVzZW50aW5nIGhvbGVzXG5cbi8qKlxuICogQ2hlY2sgaWYgdGhpcyBpcyBhIG5vbi1uZXN0ZWQgcG9seWdvbiAoaS5lLiB0aGUgZmlyc3QgZWxlbWVudCBvZiB0aGUgZmlyc3QgZWxlbWVudCBpcyBhIG51bWJlcilcbiAqIEBwYXJhbSB7QXJyYXl9IHBvbHlnb24gLSBlaXRoZXIgYSBjb21wbGV4IG9yIHNpbXBsZSBwb2x5Z29uXG4gKiBAcmV0dXJuIHtCb29sZWFufSAtIHRydWUgaWYgdGhlIHBvbHlnb24gaXMgYSBzaW1wbGUgcG9seWdvbiAoaS5lLiBub3QgYW4gYXJyYXkgb2YgcG9seWdvbnMpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1NpbXBsZShwb2x5Z29uKSB7XG4gIHJldHVybiBjb3VudChwb2x5Z29uKSA+PSAxICYmXG4gICAgY291bnQoZ2V0KHBvbHlnb24sIDApKSA+PSAyICYmXG4gICAgTnVtYmVyLmlzRmluaXRlKGdldChnZXQocG9seWdvbiwgMCksIDApKTtcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdG8gZW5zdXJlIHRoYXQgYWxsIHBvbHlnb25zIGluIGEgbGlzdCBhcmUgY29tcGxleCAtIHNpbXBsaWZpZXMgcHJvY2Vzc2luZ1xuICogQHBhcmFtIHtBcnJheX0gcG9seWdvbiAtIGVpdGhlciBhIGNvbXBsZXggb3IgYSBzaW1wbGUgcG9seWdvblxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzLmRpbWVuc2lvbnMgLSBpZiAzLCB0aGUgY29vcmRzIHdpbGwgYmUgcGFkZGVkIHdpdGggMCdzIGlmIG5lZWRlZFxuICogQHJldHVybiB7QXJyYXl9IC0gcmV0dXJucyBhIGNvbXBsZXggcG9seWdvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShwb2x5Z29uLCB7ZGltZW5zaW9ucyA9IDN9ID0ge30pIHtcbiAgcmV0dXJuIGlzU2ltcGxlKHBvbHlnb24pID8gW3BvbHlnb25dIDogcG9seWdvbjtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGlzIGlzIGEgbm9uLW5lc3RlZCBwb2x5Z29uIChpLmUuIHRoZSBmaXJzdCBlbGVtZW50IG9mIHRoZSBmaXJzdCBlbGVtZW50IGlzIGEgbnVtYmVyKVxuICogQHBhcmFtIHtBcnJheX0gcG9seWdvbiAtIGVpdGhlciBhIGNvbXBsZXggb3Igc2ltcGxlIHBvbHlnb25cbiAqIEByZXR1cm4ge0Jvb2xlYW59IC0gdHJ1ZSBpZiB0aGUgcG9seWdvbiBpcyBhIHNpbXBsZSBwb2x5Z29uIChpLmUuIG5vdCBhbiBhcnJheSBvZiBwb2x5Z29ucylcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFZlcnRleENvdW50KHBvbHlnb24pIHtcbiAgcmV0dXJuIGlzU2ltcGxlKHBvbHlnb24pID9cbiAgICBjb3VudChwb2x5Z29uKSA6XG4gICAgcG9seWdvbi5yZWR1Y2UoKGxlbmd0aCwgc2ltcGxlUG9seWdvbikgPT4gbGVuZ3RoICsgY291bnQoc2ltcGxlUG9seWdvbiksIDApO1xufVxuXG4vLyBSZXR1cm4gbnVtYmVyIG9mIHRyaWFuZ2xlcyBuZWVkZWQgdG8gdGVzc2VsYXRlIHRoZSBwb2x5Z29uXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJpYW5nbGVDb3VudChwb2x5Z29uKSB7XG4gIGxldCB0cmlhbmdsZUNvdW50ID0gMDtcbiAgbGV0IGZpcnN0ID0gdHJ1ZTtcbiAgZm9yIChjb25zdCBzaW1wbGVQb2x5Z29uIG9mIG5vcm1hbGl6ZShwb2x5Z29uKSkge1xuICAgIGNvbnN0IHNpemUgPSBjb3VudChzaW1wbGVQb2x5Z29uKTtcbiAgICBpZiAoZmlyc3QpIHtcbiAgICAgIHRyaWFuZ2xlQ291bnQgKz0gc2l6ZSA+PSAzID8gc2l6ZSAtIDIgOiAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmlhbmdsZUNvdW50ICs9IHNpemUgKyAxO1xuICAgIH1cbiAgICBmaXJzdCA9IGZhbHNlO1xuICB9XG4gIHJldHVybiB0cmlhbmdsZUNvdW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9yRWFjaFZlcnRleChwb2x5Z29uLCB2aXNpdG9yKSB7XG4gIGlmIChpc1NpbXBsZShwb2x5Z29uKSkge1xuICAgIHBvbHlnb24uZm9yRWFjaCh2aXNpdG9yKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgdmVydGV4SW5kZXggPSAwO1xuICBwb2x5Z29uLmZvckVhY2goc2ltcGxlUG9seWdvbiA9PiB7XG4gICAgc2ltcGxlUG9seWdvbi5mb3JFYWNoKCh2LCBpLCBwKSA9PiB2aXNpdG9yKHYsIHZlcnRleEluZGV4LCBwb2x5Z29uKSk7XG4gICAgdmVydGV4SW5kZXgrKztcbiAgfSk7XG59XG4iXX0=