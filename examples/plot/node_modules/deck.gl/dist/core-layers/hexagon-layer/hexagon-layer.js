'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _core = require('../../core');

var _hexagonCellLayer = require('../hexagon-cell-layer/hexagon-cell-layer');

var _hexagonCellLayer2 = _interopRequireDefault(_hexagonCellLayer);

var _utils = require('../../core/lib/utils');

var _binSorter = require('../../core/utils/bin-sorter');

var _binSorter2 = _interopRequireDefault(_binSorter);

var _scaleUtils = require('../../core/utils/scale-utils');

var _colorUtils = require('../../core/utils/color-utils');

var _hexagonAggregator2 = require('./hexagon-aggregator');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

function nop() {}

var defaultProps = {
  // color
  colorDomain: null,
  colorRange: _colorUtils.defaultColorRange,
  getColorValue: function getColorValue(points) {
    return points.length;
  },
  lowerPercentile: 0,
  upperPercentile: 100,
  onSetColorDomain: nop,

  // elevation
  elevationDomain: null,
  elevationRange: [0, 1000],
  getElevationValue: function getElevationValue(points) {
    return points.length;
  },
  elevationLowerPercentile: 0,
  elevationUpperPercentile: 100,
  elevationScale: 1,
  onSetElevationDomain: nop,

  radius: 1000,
  coverage: 1,
  extruded: false,
  hexagonAggregator: _hexagonAggregator2.pointToHexbin,
  getPosition: function getPosition(x) {
    return x.position;
  },
  fp64: false,
  // Optional settings for 'lighting' shader module
  lightSettings: {
    lightsPosition: [-122.45, 37.75, 8000, -122.0, 38.00, 5000],
    ambientRatio: 0.05,
    diffuseRatio: 0.6,
    specularRatio: 0.8,
    lightsStrength: [2.0, 0.0, 0.0, 0.0],
    numberOfLights: 2
  }
};

var HexagonLayer = function (_CompositeLayer) {
  _inherits(HexagonLayer, _CompositeLayer);

  function HexagonLayer(props) {
    _classCallCheck(this, HexagonLayer);

    if (!props.hexagonAggregator && !props.radius) {
      _utils.log.once(0, 'HexagonLayer: Default hexagonAggregator requires radius prop to be set, ' + 'Now using 1000 meter as default');

      props.radius = defaultProps.radius;
    }

    if (Number.isFinite(props.upperPercentile) && (props.upperPercentile > 100 || props.upperPercentile < 0)) {
      _utils.log.once(0, 'HexagonLayer: upperPercentile should be between 0 and 100. ' + 'Assign to 100 by default');

      props.upperPercentile = defaultProps.upperPercentile;
    }

    if (Number.isFinite(props.lowerPercentile) && (props.lowerPercentile > 100 || props.lowerPercentile < 0)) {
      _utils.log.once(0, 'HexagonLayer: lowerPercentile should be between 0 and 100. ' + 'Assign to 0 by default');

      props.lowerPercentile = defaultProps.upperPercentile;
    }

    if (props.lowerPercentile >= props.upperPercentile) {
      _utils.log.once(0, 'HexagonLayer: lowerPercentile should not be bigger than ' + 'upperPercentile. Assign to 0 by default');

      props.lowerPercentile = defaultProps.lowerPercentile;
    }

    return _possibleConstructorReturn(this, (HexagonLayer.__proto__ || Object.getPrototypeOf(HexagonLayer)).call(this, props));
  }

  _createClass(HexagonLayer, [{
    key: 'initializeState',
    value: function initializeState() {
      this.state = {
        hexagons: [],
        hexagonVertices: null,
        sortedColorBins: null,
        sortedElevationBins: null,
        colorValueDomain: null,
        elevationValueDomain: null,
        colorScaleFunc: nop,
        elevationScaleFunc: nop,
        dimensionUpdaters: this.getDimensionUpdaters()
      };
    }
  }, {
    key: 'shouldUpdateState',
    value: function shouldUpdateState(_ref) {
      var changeFlags = _ref.changeFlags;

      return changeFlags.somethingChanged;
    }
  }, {
    key: 'updateState',
    value: function updateState(_ref2) {
      var _this2 = this;

      var oldProps = _ref2.oldProps,
          props = _ref2.props,
          changeFlags = _ref2.changeFlags;

      var dimensionChanges = this.getDimensionChanges(oldProps, props);

      if (changeFlags.dataChanged || this.needsReProjectPoints(oldProps, props)) {
        // project data into hexagons, and get sortedColorBins
        this.getHexagons();
      } else if (dimensionChanges) {
        dimensionChanges.forEach(function (f) {
          return typeof f === 'function' && f.apply(_this2);
        });
      }
    }
  }, {
    key: 'needsReProjectPoints',
    value: function needsReProjectPoints(oldProps, props) {
      return oldProps.radius !== props.radius || oldProps.hexagonAggregator !== props.hexagonAggregator;
    }
  }, {
    key: 'getDimensionUpdaters',
    value: function getDimensionUpdaters() {
      // dimension updaters are sequential,
      // if the first one needs to be called, the 2nd and 3rd one will automatically
      // be called. e.g. if ColorValue needs to be updated, getColorValueDomain and getColorScale
      // will automatically be called
      return {
        getColor: [{
          id: 'value',
          triggers: ['getColorValue'],
          updater: this.getSortedColorBins
        }, {
          id: 'domain',
          triggers: ['lowerPercentile', 'upperPercentile'],
          updater: this.getColorValueDomain
        }, {
          id: 'scaleFunc',
          triggers: ['colorDomain', 'colorRange'],
          updater: this.getColorScale
        }],
        getElevation: [{
          id: 'value',
          triggers: ['getElevationValue'],
          updater: this.getSortedElevationBins
        }, {
          id: 'domain',
          triggers: ['elevationLowerPercentile', 'elevationUpperPercentile'],
          updater: this.getElevationValueDomain
        }, {
          id: 'scaleFunc',
          triggers: ['elevationDomain', 'elevationRange'],
          updater: this.getElevationScale
        }]
      };
    }
  }, {
    key: 'getDimensionChanges',
    value: function getDimensionChanges(oldProps, props) {
      var dimensionUpdaters = this.state.dimensionUpdaters;

      var updaters = [];

      // get dimension to be updated
      for (var dimensionKey in dimensionUpdaters) {

        // return the first triggered updater for each dimension
        var needUpdate = dimensionUpdaters[dimensionKey].find(function (item) {
          return item.triggers.some(function (t) {
            return oldProps[t] !== props[t];
          });
        });

        if (needUpdate) {
          updaters.push(needUpdate.updater);
        }
      }

      return updaters.length ? updaters : null;
    }
  }, {
    key: 'getHexagons',
    value: function getHexagons() {
      var hexagonAggregator = this.props.hexagonAggregator;
      var viewport = this.context.viewport;

      var _hexagonAggregator = hexagonAggregator(this.props, viewport),
          hexagons = _hexagonAggregator.hexagons,
          hexagonVertices = _hexagonAggregator.hexagonVertices;

      this.setState({ hexagons: hexagons, hexagonVertices: hexagonVertices });
      this.getSortedBins();
    }
  }, {
    key: 'getPickingInfo',
    value: function getPickingInfo(_ref3) {
      var info = _ref3.info;
      var _state = this.state,
          sortedColorBins = _state.sortedColorBins,
          sortedElevationBins = _state.sortedElevationBins;

      var isPicked = info.picked && info.index > -1;

      var object = null;
      if (isPicked) {

        var cell = this.state.hexagons[info.index];

        var colorValue = sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;
        var elevationValue = sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;

        object = Object.assign({
          colorValue: colorValue,
          elevationValue: elevationValue
        }, cell);
      }

      // add bin colorValue and elevationValue to info
      return Object.assign(info, {
        picked: Boolean(object),
        // override object with picked cell
        object: object
      });
    }
  }, {
    key: 'getUpdateTriggers',
    value: function getUpdateTriggers() {
      var _this3 = this;

      var dimensionUpdaters = this.state.dimensionUpdaters;

      // merge all dimension triggers

      var updateTriggers = {};

      var _loop = function _loop(dimensionKey) {

        updateTriggers[dimensionKey] = {};

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = dimensionUpdaters[dimensionKey][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var step = _step.value;


            step.triggers.forEach(function (prop) {
              updateTriggers[dimensionKey][prop] = _this3.props[prop];
            });
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      };

      for (var dimensionKey in dimensionUpdaters) {
        _loop(dimensionKey);
      }

      return updateTriggers;
    }
  }, {
    key: 'getValueDomain',
    value: function getValueDomain() {
      this.getColorValueDomain();
      this.getElevationValueDomain();
    }
  }, {
    key: 'getSortedBins',
    value: function getSortedBins() {
      this.getSortedColorBins();
      this.getSortedElevationBins();
    }
  }, {
    key: 'getSortedColorBins',
    value: function getSortedColorBins() {
      var getColorValue = this.props.getColorValue;

      var sortedColorBins = new _binSorter2.default(this.state.hexagons || [], getColorValue);

      this.setState({ sortedColorBins: sortedColorBins });
      this.getColorValueDomain();
    }
  }, {
    key: 'getSortedElevationBins',
    value: function getSortedElevationBins() {
      var getElevationValue = this.props.getElevationValue;

      var sortedElevationBins = new _binSorter2.default(this.state.hexagons || [], getElevationValue);
      this.setState({ sortedElevationBins: sortedElevationBins });
      this.getElevationValueDomain();
    }
  }, {
    key: 'getColorValueDomain',
    value: function getColorValueDomain() {
      var _props = this.props,
          lowerPercentile = _props.lowerPercentile,
          upperPercentile = _props.upperPercentile,
          onSetColorDomain = _props.onSetColorDomain;


      this.state.colorValueDomain = this.state.sortedColorBins.getValueRange([lowerPercentile, upperPercentile]);

      if (typeof onSetColorDomain === 'function') {
        onSetColorDomain(this.state.colorValueDomain);
      }

      this.getColorScale();
    }
  }, {
    key: 'getElevationValueDomain',
    value: function getElevationValueDomain() {
      var _props2 = this.props,
          elevationLowerPercentile = _props2.elevationLowerPercentile,
          elevationUpperPercentile = _props2.elevationUpperPercentile,
          onSetElevationDomain = _props2.onSetElevationDomain;


      this.state.elevationValueDomain = this.state.sortedElevationBins.getValueRange([elevationLowerPercentile, elevationUpperPercentile]);

      if (typeof onSetElevationDomain === 'function') {
        onSetElevationDomain(this.state.elevationValueDomain);
      }

      this.getElevationScale();
    }
  }, {
    key: 'getColorScale',
    value: function getColorScale() {
      var colorRange = this.props.colorRange;

      var colorDomain = this.props.colorDomain || this.state.colorValueDomain;

      this.state.colorScaleFunc = (0, _scaleUtils.getQuantizeScale)(colorDomain, colorRange);
    }
  }, {
    key: 'getElevationScale',
    value: function getElevationScale() {
      var elevationRange = this.props.elevationRange;

      var elevationDomain = this.props.elevationDomain || this.state.elevationValueDomain;

      this.state.elevationScaleFunc = (0, _scaleUtils.getLinearScale)(elevationDomain, elevationRange);
    }
  }, {
    key: '_onGetSublayerColor',
    value: function _onGetSublayerColor(cell) {
      var _state2 = this.state,
          sortedColorBins = _state2.sortedColorBins,
          colorScaleFunc = _state2.colorScaleFunc,
          colorValueDomain = _state2.colorValueDomain;


      var cv = sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;
      var colorDomain = this.props.colorDomain || colorValueDomain;

      var isColorValueInDomain = cv >= colorDomain[0] && cv <= colorDomain[colorDomain.length - 1];

      // if cell value is outside domain, set alpha to 0
      var color = isColorValueInDomain ? colorScaleFunc(cv) : [0, 0, 0, 0];

      // add alpha to color if not defined in colorRange
      color[3] = Number.isFinite(color[3]) ? color[3] : 255;

      return color;
    }
  }, {
    key: '_onGetSublayerElevation',
    value: function _onGetSublayerElevation(cell) {
      var _state3 = this.state,
          sortedElevationBins = _state3.sortedElevationBins,
          elevationScaleFunc = _state3.elevationScaleFunc,
          elevationValueDomain = _state3.elevationValueDomain;

      var ev = sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;

      var elevationDomain = this.props.elevationDomain || elevationValueDomain;

      var isElevationValueInDomain = ev >= elevationDomain[0] && ev <= elevationDomain[elevationDomain.length - 1];

      // if cell value is outside domain, set elevation to -1
      return isElevationValueInDomain ? elevationScaleFunc(ev) : -1;
    }

    // for subclassing, override this method to return
    // customized sub layer props

  }, {
    key: 'getSubLayerProps',
    value: function getSubLayerProps() {
      var _props3 = this.props,
          id = _props3.id,
          radius = _props3.radius,
          elevationScale = _props3.elevationScale,
          extruded = _props3.extruded,
          coverage = _props3.coverage,
          lightSettings = _props3.lightSettings,
          fp64 = _props3.fp64;


      var forwardProps = this.getBaseLayerProps();

      // return props to the sublayer constructor
      return Object.assign({}, forwardProps, {
        id: id + '-hexagon-cell',
        data: this.state.hexagons,

        fp64: fp64,
        hexagonVertices: this.state.hexagonVertices,
        radius: radius,
        elevationScale: elevationScale,
        angle: Math.PI,
        extruded: extruded,
        coverage: coverage,
        lightSettings: lightSettings,

        getColor: this._onGetSublayerColor.bind(this),
        getElevation: this._onGetSublayerElevation.bind(this),
        updateTriggers: this.getUpdateTriggers()
      });
    }

    // for subclassing, override this method to return
    // customized sub layer class

  }, {
    key: 'getSubLayerClass',
    value: function getSubLayerClass() {
      return _hexagonCellLayer2.default;
    }
  }, {
    key: 'renderLayers',
    value: function renderLayers() {
      var SubLayerClass = this.getSubLayerClass();

      return new SubLayerClass(this.getSubLayerProps());
    }
  }]);

  return HexagonLayer;
}(_core.CompositeLayer);

exports.default = HexagonLayer;


HexagonLayer.layerName = 'HexagonLayer';
HexagonLayer.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3JlLWxheWVycy9oZXhhZ29uLWxheWVyL2hleGFnb24tbGF5ZXIuanMiXSwibmFtZXMiOlsibm9wIiwiZGVmYXVsdFByb3BzIiwiY29sb3JEb21haW4iLCJjb2xvclJhbmdlIiwiZ2V0Q29sb3JWYWx1ZSIsInBvaW50cyIsImxlbmd0aCIsImxvd2VyUGVyY2VudGlsZSIsInVwcGVyUGVyY2VudGlsZSIsIm9uU2V0Q29sb3JEb21haW4iLCJlbGV2YXRpb25Eb21haW4iLCJlbGV2YXRpb25SYW5nZSIsImdldEVsZXZhdGlvblZhbHVlIiwiZWxldmF0aW9uTG93ZXJQZXJjZW50aWxlIiwiZWxldmF0aW9uVXBwZXJQZXJjZW50aWxlIiwiZWxldmF0aW9uU2NhbGUiLCJvblNldEVsZXZhdGlvbkRvbWFpbiIsInJhZGl1cyIsImNvdmVyYWdlIiwiZXh0cnVkZWQiLCJoZXhhZ29uQWdncmVnYXRvciIsImdldFBvc2l0aW9uIiwieCIsInBvc2l0aW9uIiwiZnA2NCIsImxpZ2h0U2V0dGluZ3MiLCJsaWdodHNQb3NpdGlvbiIsImFtYmllbnRSYXRpbyIsImRpZmZ1c2VSYXRpbyIsInNwZWN1bGFyUmF0aW8iLCJsaWdodHNTdHJlbmd0aCIsIm51bWJlck9mTGlnaHRzIiwiSGV4YWdvbkxheWVyIiwicHJvcHMiLCJvbmNlIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJzdGF0ZSIsImhleGFnb25zIiwiaGV4YWdvblZlcnRpY2VzIiwic29ydGVkQ29sb3JCaW5zIiwic29ydGVkRWxldmF0aW9uQmlucyIsImNvbG9yVmFsdWVEb21haW4iLCJlbGV2YXRpb25WYWx1ZURvbWFpbiIsImNvbG9yU2NhbGVGdW5jIiwiZWxldmF0aW9uU2NhbGVGdW5jIiwiZGltZW5zaW9uVXBkYXRlcnMiLCJnZXREaW1lbnNpb25VcGRhdGVycyIsImNoYW5nZUZsYWdzIiwic29tZXRoaW5nQ2hhbmdlZCIsIm9sZFByb3BzIiwiZGltZW5zaW9uQ2hhbmdlcyIsImdldERpbWVuc2lvbkNoYW5nZXMiLCJkYXRhQ2hhbmdlZCIsIm5lZWRzUmVQcm9qZWN0UG9pbnRzIiwiZ2V0SGV4YWdvbnMiLCJmb3JFYWNoIiwiZiIsImFwcGx5IiwiZ2V0Q29sb3IiLCJpZCIsInRyaWdnZXJzIiwidXBkYXRlciIsImdldFNvcnRlZENvbG9yQmlucyIsImdldENvbG9yVmFsdWVEb21haW4iLCJnZXRDb2xvclNjYWxlIiwiZ2V0RWxldmF0aW9uIiwiZ2V0U29ydGVkRWxldmF0aW9uQmlucyIsImdldEVsZXZhdGlvblZhbHVlRG9tYWluIiwiZ2V0RWxldmF0aW9uU2NhbGUiLCJ1cGRhdGVycyIsImRpbWVuc2lvbktleSIsIm5lZWRVcGRhdGUiLCJmaW5kIiwiaXRlbSIsInNvbWUiLCJ0IiwicHVzaCIsInZpZXdwb3J0IiwiY29udGV4dCIsInNldFN0YXRlIiwiZ2V0U29ydGVkQmlucyIsImluZm8iLCJpc1BpY2tlZCIsInBpY2tlZCIsImluZGV4Iiwib2JqZWN0IiwiY2VsbCIsImNvbG9yVmFsdWUiLCJiaW5NYXAiLCJ2YWx1ZSIsImVsZXZhdGlvblZhbHVlIiwiT2JqZWN0IiwiYXNzaWduIiwiQm9vbGVhbiIsInVwZGF0ZVRyaWdnZXJzIiwic3RlcCIsInByb3AiLCJnZXRWYWx1ZVJhbmdlIiwiY3YiLCJpc0NvbG9yVmFsdWVJbkRvbWFpbiIsImNvbG9yIiwiZXYiLCJpc0VsZXZhdGlvblZhbHVlSW5Eb21haW4iLCJmb3J3YXJkUHJvcHMiLCJnZXRCYXNlTGF5ZXJQcm9wcyIsImRhdGEiLCJhbmdsZSIsIk1hdGgiLCJQSSIsIl9vbkdldFN1YmxheWVyQ29sb3IiLCJiaW5kIiwiX29uR2V0U3VibGF5ZXJFbGV2YXRpb24iLCJnZXRVcGRhdGVUcmlnZ2VycyIsIlN1YkxheWVyQ2xhc3MiLCJnZXRTdWJMYXllckNsYXNzIiwiZ2V0U3ViTGF5ZXJQcm9wcyIsImxheWVyTmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFvQkE7O0FBQ0E7Ozs7QUFDQTs7QUFFQTs7OztBQUNBOztBQUNBOztBQUNBOzs7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T0EsRUFBUCxrQkFEcUM7QUFFckM4QyxjQUFNLEtBQUtyRSxLQUFMLENBQVdDLFFBRm9COztBQUlyQ2Qsa0JBSnFDO0FBS3JDZSx5QkFBaUIsS0FBS0YsS0FBTCxDQUFXRSxlQUxTO0FBTXJDdEIsc0JBTnFDO0FBT3JDRixzQ0FQcUM7QUFRckM0RixlQUFPQyxLQUFLQyxFQVJ5QjtBQVNyQzFGLDBCQVRxQztBQVVyQ0QsMEJBVnFDO0FBV3JDTyxvQ0FYcUM7O0FBYXJDa0Msa0JBQVUsS0FBS21ELG1CQUFMLENBQXlCQyxJQUF6QixDQUE4QixJQUE5QixDQWIyQjtBQWNyQzdDLHNCQUFjLEtBQUs4Qyx1QkFBTCxDQUE2QkQsSUFBN0IsQ0FBa0MsSUFBbEMsQ0FkdUI7QUFlckNoQix3QkFBZ0IsS0FBS2tCLGlCQUFMO0FBZnFCLE9BQWhDLENBQVA7QUFpQkQ7O0FBRUQ7QUFDQTs7Ozt1Q0FDbUI7QUFDakI7QUFDRDs7O21DQUVjO0FBQ2IsVUFBTUMsZ0JBQWdCLEtBQUtDLGdCQUFMLEVBQXRCOztBQUVBLGFBQU8sSUFBSUQsYUFBSixDQUNMLEtBQUtFLGdCQUFMLEVBREssQ0FBUDtBQUdEOzs7Ozs7a0JBalVrQnBGLFk7OztBQW9VckJBLGFBQWFxRixTQUFiLEdBQXlCLGNBQXpCO0FBQ0FyRixhQUFhL0IsWUFBYixHQUE0QkEsWUFBNUIiLCJmaWxlIjoiaGV4YWdvbi1sYXllci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNSAtIDIwMTcgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQge0NvbXBvc2l0ZUxheWVyfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCBIZXhhZ29uQ2VsbExheWVyIGZyb20gJy4uL2hleGFnb24tY2VsbC1sYXllci9oZXhhZ29uLWNlbGwtbGF5ZXInO1xuaW1wb3J0IHtsb2d9IGZyb20gJy4uLy4uL2NvcmUvbGliL3V0aWxzJztcblxuaW1wb3J0IEJpblNvcnRlciBmcm9tICcuLi8uLi9jb3JlL3V0aWxzL2Jpbi1zb3J0ZXInO1xuaW1wb3J0IHtnZXRRdWFudGl6ZVNjYWxlLCBnZXRMaW5lYXJTY2FsZX0gZnJvbSAnLi4vLi4vY29yZS91dGlscy9zY2FsZS11dGlscyc7XG5pbXBvcnQge2RlZmF1bHRDb2xvclJhbmdlfSBmcm9tICcuLi8uLi9jb3JlL3V0aWxzL2NvbG9yLXV0aWxzJztcbmltcG9ydCB7cG9pbnRUb0hleGJpbn0gZnJvbSAnLi9oZXhhZ29uLWFnZ3JlZ2F0b3InO1xuXG5mdW5jdGlvbiBub3AoKSB7fVxuXG5jb25zdCBkZWZhdWx0UHJvcHMgPSB7XG4gIC8vIGNvbG9yXG4gIGNvbG9yRG9tYWluOiBudWxsLFxuICBjb2xvclJhbmdlOiBkZWZhdWx0Q29sb3JSYW5nZSxcbiAgZ2V0Q29sb3JWYWx1ZTogcG9pbnRzID0+IHBvaW50cy5sZW5ndGgsXG4gIGxvd2VyUGVyY2VudGlsZTogMCxcbiAgdXBwZXJQZXJjZW50aWxlOiAxMDAsXG4gIG9uU2V0Q29sb3JEb21haW46IG5vcCxcblxuICAvLyBlbGV2YXRpb25cbiAgZWxldmF0aW9uRG9tYWluOiBudWxsLFxuICBlbGV2YXRpb25SYW5nZTogWzAsIDEwMDBdLFxuICBnZXRFbGV2YXRpb25WYWx1ZTogcG9pbnRzID0+IHBvaW50cy5sZW5ndGgsXG4gIGVsZXZhdGlvbkxvd2VyUGVyY2VudGlsZTogMCxcbiAgZWxldmF0aW9uVXBwZXJQZXJjZW50aWxlOiAxMDAsXG4gIGVsZXZhdGlvblNjYWxlOiAxLFxuICBvblNldEVsZXZhdGlvbkRvbWFpbjogbm9wLFxuXG4gIHJhZGl1czogMTAwMCxcbiAgY292ZXJhZ2U6IDEsXG4gIGV4dHJ1ZGVkOiBmYWxzZSxcbiAgaGV4YWdvbkFnZ3JlZ2F0b3I6IHBvaW50VG9IZXhiaW4sXG4gIGdldFBvc2l0aW9uOiB4ID0+IHgucG9zaXRpb24sXG4gIGZwNjQ6IGZhbHNlLFxuICAvLyBPcHRpb25hbCBzZXR0aW5ncyBmb3IgJ2xpZ2h0aW5nJyBzaGFkZXIgbW9kdWxlXG4gIGxpZ2h0U2V0dGluZ3M6IHtcbiAgICBsaWdodHNQb3NpdGlvbjogWy0xMjIuNDUsIDM3Ljc1LCA4MDAwLCAtMTIyLjAsIDM4LjAwLCA1MDAwXSxcbiAgICBhbWJpZW50UmF0aW86IDAuMDUsXG4gICAgZGlmZnVzZVJhdGlvOiAwLjYsXG4gICAgc3BlY3VsYXJSYXRpbzogMC44LFxuICAgIGxpZ2h0c1N0cmVuZ3RoOiBbMi4wLCAwLjAsIDAuMCwgMC4wXSxcbiAgICBudW1iZXJPZkxpZ2h0czogMlxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIZXhhZ29uTGF5ZXIgZXh0ZW5kcyBDb21wb3NpdGVMYXllciB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgaWYgKCFwcm9wcy5oZXhhZ29uQWdncmVnYXRvciAmJiAhcHJvcHMucmFkaXVzKSB7XG4gICAgICBsb2cub25jZSgwLCAnSGV4YWdvbkxheWVyOiBEZWZhdWx0IGhleGFnb25BZ2dyZWdhdG9yIHJlcXVpcmVzIHJhZGl1cyBwcm9wIHRvIGJlIHNldCwgJyArXG4gICAgICAgICdOb3cgdXNpbmcgMTAwMCBtZXRlciBhcyBkZWZhdWx0Jyk7XG5cbiAgICAgIHByb3BzLnJhZGl1cyA9IGRlZmF1bHRQcm9wcy5yYWRpdXM7XG4gICAgfVxuXG4gICAgaWYgKE51bWJlci5pc0Zpbml0ZShwcm9wcy51cHBlclBlcmNlbnRpbGUpICYmXG4gICAgICAocHJvcHMudXBwZXJQZXJjZW50aWxlID4gMTAwIHx8IHByb3BzLnVwcGVyUGVyY2VudGlsZSA8IDApKSB7XG4gICAgICBsb2cub25jZSgwLCAnSGV4YWdvbkxheWVyOiB1cHBlclBlcmNlbnRpbGUgc2hvdWxkIGJlIGJldHdlZW4gMCBhbmQgMTAwLiAnICtcbiAgICAgICAgJ0Fzc2lnbiB0byAxMDAgYnkgZGVmYXVsdCcpO1xuXG4gICAgICBwcm9wcy51cHBlclBlcmNlbnRpbGUgPSBkZWZhdWx0UHJvcHMudXBwZXJQZXJjZW50aWxlO1xuICAgIH1cblxuICAgIGlmIChOdW1iZXIuaXNGaW5pdGUocHJvcHMubG93ZXJQZXJjZW50aWxlKSAmJlxuICAgICAgKHByb3BzLmxvd2VyUGVyY2VudGlsZSA+IDEwMCB8fCBwcm9wcy5sb3dlclBlcmNlbnRpbGUgPCAwKSkge1xuICAgICAgbG9nLm9uY2UoMCwgJ0hleGFnb25MYXllcjogbG93ZXJQZXJjZW50aWxlIHNob3VsZCBiZSBiZXR3ZWVuIDAgYW5kIDEwMC4gJyArXG4gICAgICAgICdBc3NpZ24gdG8gMCBieSBkZWZhdWx0Jyk7XG5cbiAgICAgIHByb3BzLmxvd2VyUGVyY2VudGlsZSA9IGRlZmF1bHRQcm9wcy51cHBlclBlcmNlbnRpbGU7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLmxvd2VyUGVyY2VudGlsZSA+PSBwcm9wcy51cHBlclBlcmNlbnRpbGUpIHtcbiAgICAgIGxvZy5vbmNlKDAsICdIZXhhZ29uTGF5ZXI6IGxvd2VyUGVyY2VudGlsZSBzaG91bGQgbm90IGJlIGJpZ2dlciB0aGFuICcgK1xuICAgICAgICAndXBwZXJQZXJjZW50aWxlLiBBc3NpZ24gdG8gMCBieSBkZWZhdWx0Jyk7XG5cbiAgICAgIHByb3BzLmxvd2VyUGVyY2VudGlsZSA9IGRlZmF1bHRQcm9wcy5sb3dlclBlcmNlbnRpbGU7XG4gICAgfVxuXG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgaW5pdGlhbGl6ZVN0YXRlKCkge1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBoZXhhZ29uczogW10sXG4gICAgICBoZXhhZ29uVmVydGljZXM6IG51bGwsXG4gICAgICBzb3J0ZWRDb2xvckJpbnM6IG51bGwsXG4gICAgICBzb3J0ZWRFbGV2YXRpb25CaW5zOiBudWxsLFxuICAgICAgY29sb3JWYWx1ZURvbWFpbjogbnVsbCxcbiAgICAgIGVsZXZhdGlvblZhbHVlRG9tYWluOiBudWxsLFxuICAgICAgY29sb3JTY2FsZUZ1bmM6IG5vcCxcbiAgICAgIGVsZXZhdGlvblNjYWxlRnVuYzogbm9wLFxuICAgICAgZGltZW5zaW9uVXBkYXRlcnM6IHRoaXMuZ2V0RGltZW5zaW9uVXBkYXRlcnMoKVxuICAgIH07XG4gIH1cblxuICBzaG91bGRVcGRhdGVTdGF0ZSh7Y2hhbmdlRmxhZ3N9KSB7XG4gICAgcmV0dXJuIGNoYW5nZUZsYWdzLnNvbWV0aGluZ0NoYW5nZWQ7XG4gIH1cblxuICB1cGRhdGVTdGF0ZSh7b2xkUHJvcHMsIHByb3BzLCBjaGFuZ2VGbGFnc30pIHtcbiAgICBjb25zdCBkaW1lbnNpb25DaGFuZ2VzID0gdGhpcy5nZXREaW1lbnNpb25DaGFuZ2VzKG9sZFByb3BzLCBwcm9wcyk7XG5cbiAgICBpZiAoY2hhbmdlRmxhZ3MuZGF0YUNoYW5nZWQgfHwgdGhpcy5uZWVkc1JlUHJvamVjdFBvaW50cyhvbGRQcm9wcywgcHJvcHMpKSB7XG4gICAgICAvLyBwcm9qZWN0IGRhdGEgaW50byBoZXhhZ29ucywgYW5kIGdldCBzb3J0ZWRDb2xvckJpbnNcbiAgICAgIHRoaXMuZ2V0SGV4YWdvbnMoKTtcblxuICAgIH0gZWxzZSBpZiAoZGltZW5zaW9uQ2hhbmdlcykge1xuICAgICAgZGltZW5zaW9uQ2hhbmdlcy5mb3JFYWNoKGYgPT4gdHlwZW9mIGYgPT09ICdmdW5jdGlvbicgJiYgZi5hcHBseSh0aGlzKSk7XG4gICAgfVxuICB9XG5cbiAgbmVlZHNSZVByb2plY3RQb2ludHMob2xkUHJvcHMsIHByb3BzKSB7XG4gICAgcmV0dXJuIG9sZFByb3BzLnJhZGl1cyAhPT0gcHJvcHMucmFkaXVzIHx8XG4gICAgICBvbGRQcm9wcy5oZXhhZ29uQWdncmVnYXRvciAhPT0gcHJvcHMuaGV4YWdvbkFnZ3JlZ2F0b3I7XG4gIH1cblxuICBnZXREaW1lbnNpb25VcGRhdGVycygpIHtcbiAgICAvLyBkaW1lbnNpb24gdXBkYXRlcnMgYXJlIHNlcXVlbnRpYWwsXG4gICAgLy8gaWYgdGhlIGZpcnN0IG9uZSBuZWVkcyB0byBiZSBjYWxsZWQsIHRoZSAybmQgYW5kIDNyZCBvbmUgd2lsbCBhdXRvbWF0aWNhbGx5XG4gICAgLy8gYmUgY2FsbGVkLiBlLmcuIGlmIENvbG9yVmFsdWUgbmVlZHMgdG8gYmUgdXBkYXRlZCwgZ2V0Q29sb3JWYWx1ZURvbWFpbiBhbmQgZ2V0Q29sb3JTY2FsZVxuICAgIC8vIHdpbGwgYXV0b21hdGljYWxseSBiZSBjYWxsZWRcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0Q29sb3I6IFtcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAndmFsdWUnLFxuICAgICAgICAgIHRyaWdnZXJzOiBbJ2dldENvbG9yVmFsdWUnXSxcbiAgICAgICAgICB1cGRhdGVyOiB0aGlzLmdldFNvcnRlZENvbG9yQmluc1xuICAgICAgICB9LCB7XG4gICAgICAgICAgaWQ6ICdkb21haW4nLFxuICAgICAgICAgIHRyaWdnZXJzOiBbJ2xvd2VyUGVyY2VudGlsZScsICd1cHBlclBlcmNlbnRpbGUnXSxcbiAgICAgICAgICB1cGRhdGVyOiB0aGlzLmdldENvbG9yVmFsdWVEb21haW5cbiAgICAgICAgfSwge1xuICAgICAgICAgIGlkOiAnc2NhbGVGdW5jJyxcbiAgICAgICAgICB0cmlnZ2VyczogWydjb2xvckRvbWFpbicsICdjb2xvclJhbmdlJ10sXG4gICAgICAgICAgdXBkYXRlcjogdGhpcy5nZXRDb2xvclNjYWxlXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBnZXRFbGV2YXRpb246IFtcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAndmFsdWUnLFxuICAgICAgICAgIHRyaWdnZXJzOiBbJ2dldEVsZXZhdGlvblZhbHVlJ10sXG4gICAgICAgICAgdXBkYXRlcjogdGhpcy5nZXRTb3J0ZWRFbGV2YXRpb25CaW5zXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBpZDogJ2RvbWFpbicsXG4gICAgICAgICAgdHJpZ2dlcnM6IFsnZWxldmF0aW9uTG93ZXJQZXJjZW50aWxlJywgJ2VsZXZhdGlvblVwcGVyUGVyY2VudGlsZSddLFxuICAgICAgICAgIHVwZGF0ZXI6IHRoaXMuZ2V0RWxldmF0aW9uVmFsdWVEb21haW5cbiAgICAgICAgfSwge1xuICAgICAgICAgIGlkOiAnc2NhbGVGdW5jJyxcbiAgICAgICAgICB0cmlnZ2VyczogWydlbGV2YXRpb25Eb21haW4nLCAnZWxldmF0aW9uUmFuZ2UnXSxcbiAgICAgICAgICB1cGRhdGVyOiB0aGlzLmdldEVsZXZhdGlvblNjYWxlXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG5cbiAgZ2V0RGltZW5zaW9uQ2hhbmdlcyhvbGRQcm9wcywgcHJvcHMpIHtcbiAgICBjb25zdCB7ZGltZW5zaW9uVXBkYXRlcnN9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB1cGRhdGVycyA9IFtdO1xuXG4gICAgLy8gZ2V0IGRpbWVuc2lvbiB0byBiZSB1cGRhdGVkXG4gICAgZm9yIChjb25zdCBkaW1lbnNpb25LZXkgaW4gZGltZW5zaW9uVXBkYXRlcnMpIHtcblxuICAgICAgLy8gcmV0dXJuIHRoZSBmaXJzdCB0cmlnZ2VyZWQgdXBkYXRlciBmb3IgZWFjaCBkaW1lbnNpb25cbiAgICAgIGNvbnN0IG5lZWRVcGRhdGUgPSBkaW1lbnNpb25VcGRhdGVyc1tkaW1lbnNpb25LZXldXG4gICAgICAgIC5maW5kKGl0ZW0gPT4gaXRlbS50cmlnZ2Vycy5zb21lKHQgPT4gb2xkUHJvcHNbdF0gIT09IHByb3BzW3RdKSk7XG5cbiAgICAgIGlmIChuZWVkVXBkYXRlKSB7XG4gICAgICAgIHVwZGF0ZXJzLnB1c2gobmVlZFVwZGF0ZS51cGRhdGVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdXBkYXRlcnMubGVuZ3RoID8gdXBkYXRlcnMgOiBudWxsO1xuICB9XG5cbiAgZ2V0SGV4YWdvbnMoKSB7XG4gICAgY29uc3Qge2hleGFnb25BZ2dyZWdhdG9yfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qge3ZpZXdwb3J0fSA9IHRoaXMuY29udGV4dDtcbiAgICBjb25zdCB7aGV4YWdvbnMsIGhleGFnb25WZXJ0aWNlc30gPSBoZXhhZ29uQWdncmVnYXRvcih0aGlzLnByb3BzLCB2aWV3cG9ydCk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7aGV4YWdvbnMsIGhleGFnb25WZXJ0aWNlc30pO1xuICAgIHRoaXMuZ2V0U29ydGVkQmlucygpO1xuICB9XG5cbiAgZ2V0UGlja2luZ0luZm8oe2luZm99KSB7XG4gICAgY29uc3Qge3NvcnRlZENvbG9yQmlucywgc29ydGVkRWxldmF0aW9uQmluc30gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IGlzUGlja2VkID0gaW5mby5waWNrZWQgJiYgaW5mby5pbmRleCA+IC0xO1xuXG4gICAgbGV0IG9iamVjdCA9IG51bGw7XG4gICAgaWYgKGlzUGlja2VkKSB7XG5cbiAgICAgIGNvbnN0IGNlbGwgPSB0aGlzLnN0YXRlLmhleGFnb25zW2luZm8uaW5kZXhdO1xuXG4gICAgICBjb25zdCBjb2xvclZhbHVlID0gc29ydGVkQ29sb3JCaW5zLmJpbk1hcFtjZWxsLmluZGV4XSAmJlxuICAgICAgICBzb3J0ZWRDb2xvckJpbnMuYmluTWFwW2NlbGwuaW5kZXhdLnZhbHVlO1xuICAgICAgY29uc3QgZWxldmF0aW9uVmFsdWUgPSBzb3J0ZWRFbGV2YXRpb25CaW5zLmJpbk1hcFtjZWxsLmluZGV4XSAmJlxuICAgICAgICBzb3J0ZWRFbGV2YXRpb25CaW5zLmJpbk1hcFtjZWxsLmluZGV4XS52YWx1ZTtcblxuICAgICAgb2JqZWN0ID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIGNvbG9yVmFsdWUsXG4gICAgICAgIGVsZXZhdGlvblZhbHVlXG4gICAgICB9LCBjZWxsKTtcbiAgICB9XG5cbiAgICAvLyBhZGQgYmluIGNvbG9yVmFsdWUgYW5kIGVsZXZhdGlvblZhbHVlIHRvIGluZm9cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihpbmZvLCB7XG4gICAgICBwaWNrZWQ6IEJvb2xlYW4ob2JqZWN0KSxcbiAgICAgIC8vIG92ZXJyaWRlIG9iamVjdCB3aXRoIHBpY2tlZCBjZWxsXG4gICAgICBvYmplY3RcbiAgICB9KTtcbiAgfVxuXG4gIGdldFVwZGF0ZVRyaWdnZXJzKCkge1xuICAgIGNvbnN0IHtkaW1lbnNpb25VcGRhdGVyc30gPSB0aGlzLnN0YXRlO1xuXG4gICAgLy8gbWVyZ2UgYWxsIGRpbWVuc2lvbiB0cmlnZ2Vyc1xuICAgIGNvbnN0IHVwZGF0ZVRyaWdnZXJzID0ge307XG5cbiAgICBmb3IgKGNvbnN0IGRpbWVuc2lvbktleSBpbiBkaW1lbnNpb25VcGRhdGVycykge1xuXG4gICAgICB1cGRhdGVUcmlnZ2Vyc1tkaW1lbnNpb25LZXldID0ge307XG5cbiAgICAgIGZvciAoY29uc3Qgc3RlcCBvZiBkaW1lbnNpb25VcGRhdGVyc1tkaW1lbnNpb25LZXldKSB7XG5cbiAgICAgICAgc3RlcC50cmlnZ2Vycy5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICAgIHVwZGF0ZVRyaWdnZXJzW2RpbWVuc2lvbktleV1bcHJvcF0gPSB0aGlzLnByb3BzW3Byb3BdO1xuICAgICAgICB9KTtcblxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1cGRhdGVUcmlnZ2VycztcbiAgfVxuXG4gIGdldFZhbHVlRG9tYWluKCkge1xuICAgIHRoaXMuZ2V0Q29sb3JWYWx1ZURvbWFpbigpO1xuICAgIHRoaXMuZ2V0RWxldmF0aW9uVmFsdWVEb21haW4oKTtcbiAgfVxuXG4gIGdldFNvcnRlZEJpbnMoKSB7XG4gICAgdGhpcy5nZXRTb3J0ZWRDb2xvckJpbnMoKTtcbiAgICB0aGlzLmdldFNvcnRlZEVsZXZhdGlvbkJpbnMoKTtcbiAgfVxuXG4gIGdldFNvcnRlZENvbG9yQmlucygpIHtcbiAgICBjb25zdCB7Z2V0Q29sb3JWYWx1ZX0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHNvcnRlZENvbG9yQmlucyA9IG5ldyBCaW5Tb3J0ZXIodGhpcy5zdGF0ZS5oZXhhZ29ucyB8fCBbXSwgZ2V0Q29sb3JWYWx1ZSk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtzb3J0ZWRDb2xvckJpbnN9KTtcbiAgICB0aGlzLmdldENvbG9yVmFsdWVEb21haW4oKTtcbiAgfVxuXG4gIGdldFNvcnRlZEVsZXZhdGlvbkJpbnMoKSB7XG4gICAgY29uc3Qge2dldEVsZXZhdGlvblZhbHVlfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qgc29ydGVkRWxldmF0aW9uQmlucyA9IG5ldyBCaW5Tb3J0ZXIodGhpcy5zdGF0ZS5oZXhhZ29ucyB8fCBbXSwgZ2V0RWxldmF0aW9uVmFsdWUpO1xuICAgIHRoaXMuc2V0U3RhdGUoe3NvcnRlZEVsZXZhdGlvbkJpbnN9KTtcbiAgICB0aGlzLmdldEVsZXZhdGlvblZhbHVlRG9tYWluKCk7XG4gIH1cblxuICBnZXRDb2xvclZhbHVlRG9tYWluKCkge1xuICAgIGNvbnN0IHtsb3dlclBlcmNlbnRpbGUsIHVwcGVyUGVyY2VudGlsZSwgb25TZXRDb2xvckRvbWFpbn0gPSB0aGlzLnByb3BzO1xuXG4gICAgdGhpcy5zdGF0ZS5jb2xvclZhbHVlRG9tYWluID0gdGhpcy5zdGF0ZS5zb3J0ZWRDb2xvckJpbnNcbiAgICAgIC5nZXRWYWx1ZVJhbmdlKFtsb3dlclBlcmNlbnRpbGUsIHVwcGVyUGVyY2VudGlsZV0pO1xuXG4gICAgaWYgKHR5cGVvZiBvblNldENvbG9yRG9tYWluID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvblNldENvbG9yRG9tYWluKHRoaXMuc3RhdGUuY29sb3JWYWx1ZURvbWFpbik7XG4gICAgfVxuXG4gICAgdGhpcy5nZXRDb2xvclNjYWxlKCk7XG4gIH1cblxuICBnZXRFbGV2YXRpb25WYWx1ZURvbWFpbigpIHtcbiAgICBjb25zdCB7ZWxldmF0aW9uTG93ZXJQZXJjZW50aWxlLCBlbGV2YXRpb25VcHBlclBlcmNlbnRpbGUsIG9uU2V0RWxldmF0aW9uRG9tYWlufSA9IHRoaXMucHJvcHM7XG5cbiAgICB0aGlzLnN0YXRlLmVsZXZhdGlvblZhbHVlRG9tYWluID0gdGhpcy5zdGF0ZS5zb3J0ZWRFbGV2YXRpb25CaW5zXG4gICAgICAuZ2V0VmFsdWVSYW5nZShbZWxldmF0aW9uTG93ZXJQZXJjZW50aWxlLCBlbGV2YXRpb25VcHBlclBlcmNlbnRpbGVdKTtcblxuICAgIGlmICh0eXBlb2Ygb25TZXRFbGV2YXRpb25Eb21haW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9uU2V0RWxldmF0aW9uRG9tYWluKHRoaXMuc3RhdGUuZWxldmF0aW9uVmFsdWVEb21haW4pO1xuICAgIH1cblxuICAgIHRoaXMuZ2V0RWxldmF0aW9uU2NhbGUoKTtcbiAgfVxuXG4gIGdldENvbG9yU2NhbGUoKSB7XG4gICAgY29uc3Qge2NvbG9yUmFuZ2V9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBjb2xvckRvbWFpbiA9IHRoaXMucHJvcHMuY29sb3JEb21haW4gfHwgdGhpcy5zdGF0ZS5jb2xvclZhbHVlRG9tYWluO1xuXG4gICAgdGhpcy5zdGF0ZS5jb2xvclNjYWxlRnVuYyA9IGdldFF1YW50aXplU2NhbGUoY29sb3JEb21haW4sIGNvbG9yUmFuZ2UpO1xuICB9XG5cbiAgZ2V0RWxldmF0aW9uU2NhbGUoKSB7XG4gICAgY29uc3Qge2VsZXZhdGlvblJhbmdlfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZWxldmF0aW9uRG9tYWluID0gdGhpcy5wcm9wcy5lbGV2YXRpb25Eb21haW4gfHwgdGhpcy5zdGF0ZS5lbGV2YXRpb25WYWx1ZURvbWFpbjtcblxuICAgIHRoaXMuc3RhdGUuZWxldmF0aW9uU2NhbGVGdW5jID0gZ2V0TGluZWFyU2NhbGUoZWxldmF0aW9uRG9tYWluLCBlbGV2YXRpb25SYW5nZSk7XG4gIH1cblxuICBfb25HZXRTdWJsYXllckNvbG9yKGNlbGwpIHtcbiAgICBjb25zdCB7c29ydGVkQ29sb3JCaW5zLCBjb2xvclNjYWxlRnVuYywgY29sb3JWYWx1ZURvbWFpbn0gPSB0aGlzLnN0YXRlO1xuXG4gICAgY29uc3QgY3YgPSBzb3J0ZWRDb2xvckJpbnMuYmluTWFwW2NlbGwuaW5kZXhdICYmIHNvcnRlZENvbG9yQmlucy5iaW5NYXBbY2VsbC5pbmRleF0udmFsdWU7XG4gICAgY29uc3QgY29sb3JEb21haW4gPSB0aGlzLnByb3BzLmNvbG9yRG9tYWluIHx8IGNvbG9yVmFsdWVEb21haW47XG5cbiAgICBjb25zdCBpc0NvbG9yVmFsdWVJbkRvbWFpbiA9IGN2ID49IGNvbG9yRG9tYWluWzBdICYmIGN2IDw9IGNvbG9yRG9tYWluW2NvbG9yRG9tYWluLmxlbmd0aCAtIDFdO1xuXG4gICAgLy8gaWYgY2VsbCB2YWx1ZSBpcyBvdXRzaWRlIGRvbWFpbiwgc2V0IGFscGhhIHRvIDBcbiAgICBjb25zdCBjb2xvciA9IGlzQ29sb3JWYWx1ZUluRG9tYWluID8gY29sb3JTY2FsZUZ1bmMoY3YpIDogWzAsIDAsIDAsIDBdO1xuXG4gICAgLy8gYWRkIGFscGhhIHRvIGNvbG9yIGlmIG5vdCBkZWZpbmVkIGluIGNvbG9yUmFuZ2VcbiAgICBjb2xvclszXSA9IE51bWJlci5pc0Zpbml0ZShjb2xvclszXSkgPyBjb2xvclszXSA6IDI1NTtcblxuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuXG4gIF9vbkdldFN1YmxheWVyRWxldmF0aW9uKGNlbGwpIHtcbiAgICBjb25zdCB7c29ydGVkRWxldmF0aW9uQmlucywgZWxldmF0aW9uU2NhbGVGdW5jLCBlbGV2YXRpb25WYWx1ZURvbWFpbn0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IGV2ID0gc29ydGVkRWxldmF0aW9uQmlucy5iaW5NYXBbY2VsbC5pbmRleF0gJiZcbiAgICAgIHNvcnRlZEVsZXZhdGlvbkJpbnMuYmluTWFwW2NlbGwuaW5kZXhdLnZhbHVlO1xuXG4gICAgY29uc3QgZWxldmF0aW9uRG9tYWluID0gdGhpcy5wcm9wcy5lbGV2YXRpb25Eb21haW4gfHwgZWxldmF0aW9uVmFsdWVEb21haW47XG5cbiAgICBjb25zdCBpc0VsZXZhdGlvblZhbHVlSW5Eb21haW4gPSBldiA+PSBlbGV2YXRpb25Eb21haW5bMF0gJiZcbiAgICAgIGV2IDw9IGVsZXZhdGlvbkRvbWFpbltlbGV2YXRpb25Eb21haW4ubGVuZ3RoIC0gMV07XG5cbiAgICAvLyBpZiBjZWxsIHZhbHVlIGlzIG91dHNpZGUgZG9tYWluLCBzZXQgZWxldmF0aW9uIHRvIC0xXG4gICAgcmV0dXJuIGlzRWxldmF0aW9uVmFsdWVJbkRvbWFpbiA/IGVsZXZhdGlvblNjYWxlRnVuYyhldikgOiAtMTtcbiAgfVxuXG4gIC8vIGZvciBzdWJjbGFzc2luZywgb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gcmV0dXJuXG4gIC8vIGN1c3RvbWl6ZWQgc3ViIGxheWVyIHByb3BzXG4gIGdldFN1YkxheWVyUHJvcHMoKSB7XG4gICAgY29uc3Qge2lkLCByYWRpdXMsIGVsZXZhdGlvblNjYWxlLCBleHRydWRlZCwgY292ZXJhZ2UsIGxpZ2h0U2V0dGluZ3MsIGZwNjR9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGZvcndhcmRQcm9wcyA9IHRoaXMuZ2V0QmFzZUxheWVyUHJvcHMoKTtcblxuICAgIC8vIHJldHVybiBwcm9wcyB0byB0aGUgc3VibGF5ZXIgY29uc3RydWN0b3JcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgZm9yd2FyZFByb3BzLCB7XG4gICAgICBpZDogYCR7aWR9LWhleGFnb24tY2VsbGAsXG4gICAgICBkYXRhOiB0aGlzLnN0YXRlLmhleGFnb25zLFxuXG4gICAgICBmcDY0LFxuICAgICAgaGV4YWdvblZlcnRpY2VzOiB0aGlzLnN0YXRlLmhleGFnb25WZXJ0aWNlcyxcbiAgICAgIHJhZGl1cyxcbiAgICAgIGVsZXZhdGlvblNjYWxlLFxuICAgICAgYW5nbGU6IE1hdGguUEksXG4gICAgICBleHRydWRlZCxcbiAgICAgIGNvdmVyYWdlLFxuICAgICAgbGlnaHRTZXR0aW5ncyxcblxuICAgICAgZ2V0Q29sb3I6IHRoaXMuX29uR2V0U3VibGF5ZXJDb2xvci5iaW5kKHRoaXMpLFxuICAgICAgZ2V0RWxldmF0aW9uOiB0aGlzLl9vbkdldFN1YmxheWVyRWxldmF0aW9uLmJpbmQodGhpcyksXG4gICAgICB1cGRhdGVUcmlnZ2VyczogdGhpcy5nZXRVcGRhdGVUcmlnZ2VycygpXG4gICAgfSk7XG4gIH1cblxuICAvLyBmb3Igc3ViY2xhc3NpbmcsIG92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIHJldHVyblxuICAvLyBjdXN0b21pemVkIHN1YiBsYXllciBjbGFzc1xuICBnZXRTdWJMYXllckNsYXNzKCkge1xuICAgIHJldHVybiBIZXhhZ29uQ2VsbExheWVyO1xuICB9XG5cbiAgcmVuZGVyTGF5ZXJzKCkge1xuICAgIGNvbnN0IFN1YkxheWVyQ2xhc3MgPSB0aGlzLmdldFN1YkxheWVyQ2xhc3MoKTtcblxuICAgIHJldHVybiBuZXcgU3ViTGF5ZXJDbGFzcyhcbiAgICAgIHRoaXMuZ2V0U3ViTGF5ZXJQcm9wcygpXG4gICAgKTtcbiAgfVxufVxuXG5IZXhhZ29uTGF5ZXIubGF5ZXJOYW1lID0gJ0hleGFnb25MYXllcic7XG5IZXhhZ29uTGF5ZXIuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuIl19