'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ANIMATION_EVENTS = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _mjolnir = require('mjolnir.js');

var _controls = require('../../core/controllers/controls');

var _controls2 = _interopRequireDefault(_controls);

var _mapState = require('../../core/controllers/map-state');

var _mapState2 = _interopRequireDefault(_mapState);

var _cursors = require('../utils/cursors');

var _cursors2 = _interopRequireDefault(_cursors);

var _viewportAnimationUtils = require('./viewport-animation-utils.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* global setInterval, clearInterval */


var VIEWPORT_ANIMATE_PROPS = ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];
var VIEWPORT_ANIMATE_FREQUENCY = 0.01;
var VIEWPORT_ANIMATION_DURATION = 0;
var VIEWPORT_ANIMATION_EASING_FUNC = function VIEWPORT_ANIMATION_EASING_FUNC(t) {
  return t;
};

var ANIMATION_EVENTS = exports.ANIMATION_EVENTS = {
  BREAK: 1,
  SNAP_TO_END: 2,
  IGNORE: 3
};

var propTypes = {
  /** The width of the map. */
  width: _propTypes2.default.number.isRequired,
  /** The height of the map. */
  height: _propTypes2.default.number.isRequired,
  /** The longitude of the center of the map. */
  longitude: _propTypes2.default.number.isRequired,
  /** The latitude of the center of the map. */
  latitude: _propTypes2.default.number.isRequired,
  /** The tile zoom level of the map. */
  zoom: _propTypes2.default.number.isRequired,
  /** Specify the bearing of the viewport */
  bearing: _propTypes2.default.number,
  /** Specify the pitch of the viewport */
  pitch: _propTypes2.default.number,
  /** Altitude of the viewport camera. Default 1.5 "screen heights" */
  // Note: Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137
  altitude: _propTypes2.default.number,

  /** Viewport constraints */
  // Max zoom level
  maxZoom: _propTypes2.default.number,
  // Min zoom level
  minZoom: _propTypes2.default.number,
  // Max pitch in degrees
  maxPitch: _propTypes2.default.number,
  // Min pitch in degrees
  minPitch: _propTypes2.default.number,

  /**
   * `onViewportChange` callback is fired when the user interacted with the
   * map. The object passed to the callback contains viewport properties
   * such as `longitude`, `latitude`, `zoom` etc.
   */
  onViewportChange: _propTypes2.default.func,

  /** Viewport animation **/
  // animation duration for viewport change
  animaitonDuration: _propTypes2.default.number,
  // function called for each animation step, can be used to perform custom animations.
  animationInterpolator: _propTypes2.default.func,
  // easing function
  viewportAnimationEasingFunc: _propTypes2.default.func,

  /** Enables control event handling */
  // Scroll to zoom
  scrollZoom: _propTypes2.default.bool,
  // Drag to pan
  dragPan: _propTypes2.default.bool,
  // Drag to rotate
  dragRotate: _propTypes2.default.bool,
  // Double click to zoom
  doubleClickZoom: _propTypes2.default.bool,
  // Pinch to zoom / rotate
  touchZoomRotate: _propTypes2.default.bool,

  /** Accessor that returns a cursor style to show interactive state */
  getCursor: _propTypes2.default.func,

  // A map control instance to replace the default map controls
  // The object must expose one property: `events` as an array of subscribed
  // event names; and two methods: `setState(state)` and `handle(event)`
  controls: _propTypes2.default.shape({
    events: _propTypes2.default.arrayOf(_propTypes2.default.string),
    handleEvent: _propTypes2.default.func
  })
};

var getDefaultCursor = function getDefaultCursor(_ref) {
  var isDragging = _ref.isDragging;
  return isDragging ? _cursors2.default.GRABBING : _cursors2.default.GRAB;
};

var defaultProps = Object.assign({}, _mapState.MAPBOX_LIMITS, {
  onViewportChange: null,
  animaitonDuration: VIEWPORT_ANIMATION_DURATION,
  animationInterpolator: _viewportAnimationUtils.viewportLinearInterpolator,
  viewportAnimationEasingFunc: VIEWPORT_ANIMATION_EASING_FUNC,

  scrollZoom: true,
  dragPan: true,
  dragRotate: true,
  doubleClickZoom: true,
  touchZoomRotate: true,

  getCursor: getDefaultCursor
});

var AnimationMapController = function (_PureComponent) {
  _inherits(AnimationMapController, _PureComponent);

  function AnimationMapController(props) {
    _classCallCheck(this, AnimationMapController);

    var _this = _possibleConstructorReturn(this, (AnimationMapController.__proto__ || Object.getPrototypeOf(AnimationMapController)).call(this, props));

    _this.state = {
      isDragging: false // Whether the cursor is down
    };

    // Private animation state
    _this.animationContext = {
      animationT: 0,
      animationInterval: null,
      animationStartState: null,
      animationEndState: null,
      animatedViewport: null
    };

    _this._updateViewport = _this._updateViewport.bind(_this);
    _this._createAnimationInterval = _this._createAnimationInterval.bind(_this);
    _this._isTheUpdateDueToCurrentAnimation = _this._isTheUpdateDueToCurrentAnimation.bind(_this);
    _this._animateViewportProp = _this._animateViewportProp.bind(_this);
    _this._endAnimation = _this._endAnimation.bind(_this);
    _this._recursiveUpdateChildren = _this._recursiveUpdateChildren.bind(_this);
    _this._isViewportAnimationEnabled = _this._isViewportAnimationEnabled.bind(_this);
    _this._isAnimationInProgress = _this._isAnimationInProgress.bind(_this);
    _this._processViewportChange = _this._processViewportChange.bind(_this);
    _this._shouldIgnoreViewportChange = _this._shouldIgnoreViewportChange.bind(_this);
    return _this;
  }

  _createClass(AnimationMapController, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var eventCanvas = this.refs.eventCanvas;


      var eventManager = new _mjolnir.EventManager(eventCanvas);

      this._eventManager = eventManager;

      // If props.controls is not provided, fallback to default MapControls instance
      // Cannot use defaultProps here because it needs to be per map instance
      this._controls = this.props.controls || new _controls2.default(_mapState2.default);
      this._controls.setOptions(Object.assign({}, this.props, {
        onStateChange: this._onInteractiveStateChange.bind(this),
        eventManager: eventManager
      }));

      this.animationContext = {
        animationT: 0,
        animationInterval: null,
        animationStartState: null,
        animationEndState: null,
        animatedViewport: null
      };
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps) {
      this.someVar = 'componentWillUpdate';
      this._controls.setOptions(nextProps);
      this._processViewportChange(nextProps);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (this.animationEndCallback) {
        this.animationEndCallback({ t: this.animationEndTime });
        this.animationEndCallback = null;
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._eventManager.destroy();
    }

    // Helper methods

  }, {
    key: '_animateViewportProp',
    value: function _animateViewportProp(startViewport, nextProps) {
      var endViewport = this._extractViewportFromProps(nextProps);
      if (this._didViewportAnimatePropChanged(startViewport, endViewport)) {
        var animationInterval = this._createAnimationInterval(nextProps);
        this.animationContext = {
          animationT: 0.0,
          animationStartViewport: startViewport,
          animationEndViewport: endViewport,
          animationInterval: animationInterval,
          animatedViewport: startViewport,
          onAnimationInterruption: nextProps.onAnimationInterruption,
          onAnimationStop: nextProps.onAnimationStop
        };
        this.forceUpdate();
      }
    }
  }, {
    key: '_createAnimationInterval',
    value: function _createAnimationInterval(nextProps) {
      var _this2 = this;

      if (this.animationContext.animationInterval) {
        clearInterval(this.animationContext.animationInterval);
      }
      var updateFrequency = nextProps.animaitonDuration * VIEWPORT_ANIMATE_FREQUENCY;
      return setInterval(function () {
        return _this2._updateViewport();
      }, updateFrequency);
    }
  }, {
    key: '_didViewportAnimatePropChanged',
    value: function _didViewportAnimatePropChanged(startViewport, endViewport) {
      // TODO: also check for `animationDuration` `animationFreeze`
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = VIEWPORT_ANIMATE_PROPS[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var p = _step.value;

          if (startViewport[p] !== undefined && endViewport[p] !== undefined && startViewport[p] !== endViewport[p]) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return false;
    }
  }, {
    key: '_endAnimation',
    value: function _endAnimation() {
      clearInterval(this.animationContext.animationInterval);
      this.animationEndCallback = this.animationContext.onAnimationStop;
      this.animationEndTime = this.animationContext.animationT;
      // TODO: may be just set animationContext to null
      this.animationContext = {
        animationT: 0,
        animationInterval: null,
        animationStartState: null,
        animationEndState: null,
        animatedViewport: null,
        onAnimationStop: null,
        onAnimationInterruption: null
      };
    }

    // TODO: add viewport or viewportState prop to avoid this extraction.

  }, {
    key: '_extractViewportFromProps',
    value: function _extractViewportFromProps(props) {
      return {
        width: props.width,
        height: props.height,
        latitude: props.latitude,
        longitude: props.longitude,
        zoom: props.zoom,
        bearing: props.bearing,
        pitch: props.pitch,
        minZoom: props.minZoom,
        maxZoom: props.maxZoom
      };
    }
  }, {
    key: '_isAnimationInProgress',
    value: function _isAnimationInProgress() {
      return this.animationContext.animationInterval;
    }
  }, {
    key: '_isViewportAnimationEnabled',
    value: function _isViewportAnimationEnabled(props) {
      return props.animaitonDuration !== 0;
    }
  }, {
    key: '_isTheUpdateDueToCurrentAnimation',
    value: function _isTheUpdateDueToCurrentAnimation(nextProps) {
      if (this.animationContext.animatedViewport) {
        var newViewport = this._extractViewportFromProps(nextProps);
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = VIEWPORT_ANIMATE_PROPS[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var p = _step2.value;

            if (newViewport[p] !== this.animationContext.animatedViewport[p]) {
              return false;
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return true;
      }
      return false;
    }
  }, {
    key: '_onInteractiveStateChange',
    value: function _onInteractiveStateChange(interactiveState) {
      var _interactiveState$isD = interactiveState.isDragging,
          isDragging = _interactiveState$isD === undefined ? false : _interactiveState$isD;

      if (isDragging !== this.state.isDragging) {
        this.setState({ isDragging: isDragging });
      }
    }
  }, {
    key: '_processViewportChange',
    value: function _processViewportChange(nextProps) {

      if (this._shouldIgnoreViewportChange(nextProps)) {
        return;
      }

      var animationEndViewport = this.animationContext ? this.animationContext.animationEndViewport : null;
      var shouldSnapToEnd = this._shouldEndAnimation();
      if (this._isAnimationInProgress()) {
        this._endAnimation();
      }

      if (this._isViewportAnimationEnabled(nextProps)) {
        var startViewport = void 0;
        if (shouldSnapToEnd) {
          startViewport = animationEndViewport || this._extractViewportFromProps(this.props);
        } else {
          startViewport = this._extractViewportFromProps(this.props);
        }
        this._animateViewportProp(startViewport, nextProps);
      }
    }
  }, {
    key: '_recursiveUpdateChildren',
    value: function _recursiveUpdateChildren(children, viewport) {
      var _this3 = this;

      return _react.Children.map(children, function (child) {
        if (!(0, _react.isValidElement)(child)) {
          return child;
        }
        // TODO: we need to filter chidren and only update those that require
        // updated viewport prop.
        var childProps = Object.assign({}, viewport, { viewport: viewport });
        childProps.children = _this3._recursiveUpdateChildren(child.props.children, viewport);
        var cloned = (0, _react.cloneElement)(child, childProps);
        return cloned;
      });
    }
  }, {
    key: '_shouldEndAnimation',
    value: function _shouldEndAnimation() {
      return this.animationContext && this.animationContext.onAnimationInterruption === ANIMATION_EVENTS.SNAP_TO_END;
    }
  }, {
    key: '_shouldIgnoreViewportChange',
    value: function _shouldIgnoreViewportChange(nextProps) {
      // Ignore update if it is due to current active animation.
      if (this._isTheUpdateDueToCurrentAnimation(nextProps)) {
        return true;
      }

      // Ignore update if it is requested to ignore
      if (this.animationContext && this.animationContext.onAnimationInterruption === ANIMATION_EVENTS.IGNORE) {
        return true;
      }

      // Ignore if none of the viewport props changed.
      var start = this._extractViewportFromProps(this.props);
      var end = this._extractViewportFromProps(nextProps);
      if (!this._didViewportAnimatePropChanged(start, end)) {
        return true;
      }

      return false;
    }
  }, {
    key: '_updateViewport',
    value: function _updateViewport() {
      var t = this.props.viewportAnimationEasingFunc(this.animationContext.animationT);
      var animatedViewport = this.props.animationInterpolator(this.animationContext.animationStartViewport, this.animationContext.animationEndViewport, t);
      var currentTime = this.animationContext.animationT;
      if (currentTime <= 1.0) {
        // console.log(`Controller update pitch: ${animatedViewport.pitch} t: ${t}`);
        this.animationContext.animationT = currentTime + VIEWPORT_ANIMATE_FREQUENCY > 1.0 && currentTime + VIEWPORT_ANIMATE_FREQUENCY < 1.0 + VIEWPORT_ANIMATE_FREQUENCY ? 1.0 : currentTime + VIEWPORT_ANIMATE_FREQUENCY;
        this.animationContext.animatedViewport = Object.assign({}, this.animationContext.animationEndViewport, animatedViewport);
        if (this.props.onViewportChange) {
          this.props.onViewportChange(animatedViewport);
        }
      } else {
        this._endAnimation();
      }
      this.forceUpdate();
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          width = _props.width,
          height = _props.height,
          getCursor = _props.getCursor;


      var eventCanvasStyle = {
        width: width,
        height: height,
        position: 'relative',
        cursor: getCursor(this.state)
      };

      var childrenWithProps = void 0;
      if (this._isAnimationInProgress()) {
        childrenWithProps = this._recursiveUpdateChildren(this.props.children, this.animationContext.animatedViewport);
      } else {
        // console.log('=== AnimationController Render using original props for children');
        childrenWithProps = this._recursiveUpdateChildren(this.props.children, this._extractViewportFromProps(this.props));
      }

      return (0, _react.createElement)('div', {
        key: 'map-controls',
        ref: 'eventCanvas',
        style: eventCanvasStyle
      }, childrenWithProps);
    }
  }]);

  return AnimationMapController;
}(_react.PureComponent);

exports.default = AnimationMapController;


AnimationMapController.displayName = 'AnimationMapController';
AnimationMapController.propTypes = propTypes;
AnimationMapController.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,