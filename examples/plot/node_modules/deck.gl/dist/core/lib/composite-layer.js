'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _layer = require('./layer');

var _layer2 = _interopRequireDefault(_layer);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

var CompositeLayer = function (_Layer) {
  _inherits(CompositeLayer, _Layer);

  function CompositeLayer(props) {
    _classCallCheck(this, CompositeLayer);

    return _possibleConstructorReturn(this, (CompositeLayer.__proto__ || Object.getPrototypeOf(CompositeLayer)).call(this, props));
  }

  _createClass(CompositeLayer, [{
    key: 'initializeState',


    // initializeState is usually not needed for composite layers
    // Provide empty definition to disable check for missing definition
    value: function initializeState() {}

    // No-op for the invalidateAttribute function as the composite
    // layer has no AttributeManager

  }, {
    key: 'invalidateAttribute',
    value: function invalidateAttribute() {}

    // called to augment the info object that is bubbled up from a sublayer
    // override Layer.getPickingInfo() because decoding / setting uniform do
    // not apply to a composite layer.
    // @return null to cancel event

  }, {
    key: 'getPickingInfo',
    value: function getPickingInfo(_ref) {
      var info = _ref.info;

      return info;
    }

    // Implement to generate sublayers

  }, {
    key: 'renderLayers',
    value: function renderLayers() {
      return null;
    }

    // Returns props that should be forwarded to children
    // TODO - implement autoforwarding?

  }, {
    key: 'getBaseLayerProps',
    value: function getBaseLayerProps() {
      var _props = this.props,
          opacity = _props.opacity,
          pickable = _props.pickable,
          visible = _props.visible,
          parameters = _props.parameters,
          getPolygonOffset = _props.getPolygonOffset,
          highlightedObjectIndex = _props.highlightedObjectIndex,
          autoHighlight = _props.autoHighlight,
          highlightColor = _props.highlightColor,
          coordinateSystem = _props.coordinateSystem,
          coordinateOrigin = _props.coordinateOrigin,
          modelMatrix = _props.modelMatrix;


      return {
        opacity: opacity, pickable: pickable, visible: visible,
        parameters: parameters, getPolygonOffset: getPolygonOffset,
        highlightedObjectIndex: highlightedObjectIndex, autoHighlight: autoHighlight, highlightColor: highlightColor,
        coordinateSystem: coordinateSystem, coordinateOrigin: coordinateOrigin, modelMatrix: modelMatrix
      };
    }
  }, {
    key: '_renderLayers',
    value: function _renderLayers(updateParams) {
      if (this.state.oldSubLayers && !this.shouldUpdateState(updateParams)) {
        _utils.log.log(2, 'Composite layer reused sublayers ' + this, this.state.oldSubLayers);
        return this.state.oldSubLayers;
      }
      var subLayers = this.renderLayers();
      this.state.oldSubLayers = subLayers;
      _utils.log.log(2, 'Composite layer rendered new sublayers ' + this, this.state.oldSubLayers);
      return subLayers;
    }
  }, {
    key: 'isComposite',
    get: function get() {
      return true;
    }
  }]);

  return CompositeLayer;
}(_layer2.default);

exports.default = CompositeLayer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3JlL2xpYi9jb21wb3NpdGUtbGF5ZXIuanMiXSwibmFtZXMiOlsiQ29tcG9zaXRlTGF5ZXIiLCJwcm9wcyIsImluZm8iLCJvcGFjaXR5IiwicGlja2FibGUiLCJ2aXNpYmxlIiwicGFyYW1ldGVycyIsImdldFBvbHlnb25PZmZzZXQiLCJoaWdobGlnaHRlZE9iamVjdEluZGV4IiwiYXV0b0hpZ2hsaWdodCIsImhpZ2hsaWdodENvbG9yIiwiY29vcmRpbmF0ZVN5c3RlbSIsImNvb3JkaW5hdGVPcmlnaW4iLCJtb2RlbE1hdHJpeCIsInVwZGF0ZVBhcmFtcyIsInN0YXRlIiwib2xkU3ViTGF5ZXJzIiwic2hvdWxkVXBkYXRlU3RhdGUiLCJsb2ciLCJzdWJMYXllcnMiLCJyZW5kZXJMYXllcnMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBb0JBOzs7O0FBQ0E7Ozs7Ozs7OytlQXJCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7SUFLcUJBLGM7OztBQUNuQiwwQkFBWUMsS0FBWixFQUFtQjtBQUFBOztBQUFBLDJIQUNYQSxLQURXO0FBRWxCOzs7Ozs7QUFNRDtBQUNBO3NDQUNrQixDQUNqQjs7QUFFRDtBQUNBOzs7OzBDQUNzQixDQUNyQjs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7Ozt5Q0FDdUI7QUFBQSxVQUFQQyxJQUFPLFFBQVBBLElBQU87O0FBQ3JCLGFBQU9BLElBQVA7QUFDRDs7QUFFRDs7OzttQ0FDZTtBQUNiLGFBQU8sSUFBUDtBQUNEOztBQUVEO0FBQ0E7Ozs7d0NBQ29CO0FBQUEsbUJBTWQsS0FBS0QsS0FOUztBQUFBLFVBRWhCRSxPQUZnQixVQUVoQkEsT0FGZ0I7QUFBQSxVQUVQQyxRQUZPLFVBRVBBLFFBRk87QUFBQSxVQUVHQyxPQUZILFVBRUdBLE9BRkg7QUFBQSxVQUdoQkMsVUFIZ0IsVUFHaEJBLFVBSGdCO0FBQUEsVUFHSkMsZ0JBSEksVUFHSkEsZ0JBSEk7QUFBQSxVQUloQkMsc0JBSmdCLFVBSWhCQSxzQkFKZ0I7QUFBQSxVQUlRQyxhQUpSLFVBSVFBLGFBSlI7QUFBQSxVQUl1QkMsY0FKdkIsVUFJdUJBLGNBSnZCO0FBQUEsVUFLaEJDLGdCQUxnQixVQUtoQkEsZ0JBTGdCO0FBQUEsVUFLRUMsZ0JBTEYsVUFLRUEsZ0JBTEY7QUFBQSxVQUtvQkMsV0FMcEIsVUFLb0JBLFdBTHBCOzs7QUFRbEIsYUFBTztBQUNMVix3QkFESyxFQUNJQyxrQkFESixFQUNjQyxnQkFEZDtBQUVMQyw4QkFGSyxFQUVPQyxrQ0FGUDtBQUdMQyxzREFISyxFQUdtQkMsNEJBSG5CLEVBR2tDQyw4QkFIbEM7QUFJTEMsMENBSkssRUFJYUMsa0NBSmIsRUFJK0JDO0FBSi9CLE9BQVA7QUFNRDs7O2tDQUVhQyxZLEVBQWM7QUFDMUIsVUFBSSxLQUFLQyxLQUFMLENBQVdDLFlBQVgsSUFBMkIsQ0FBQyxLQUFLQyxpQkFBTCxDQUF1QkgsWUFBdkIsQ0FBaEMsRUFBc0U7QUFDcEUsbUJBQUlJLEdBQUosQ0FBUSxDQUFSLHdDQUErQyxJQUEvQyxFQUF1RCxLQUFLSCxLQUFMLENBQVdDLFlBQWxFO0FBQ0EsZUFBTyxLQUFLRCxLQUFMLENBQVdDLFlBQWxCO0FBQ0Q7QUFDRCxVQUFNRyxZQUFZLEtBQUtDLFlBQUwsRUFBbEI7QUFDQSxXQUFLTCxLQUFMLENBQVdDLFlBQVgsR0FBMEJHLFNBQTFCO0FBQ0EsaUJBQUlELEdBQUosQ0FBUSxDQUFSLDhDQUFxRCxJQUFyRCxFQUE2RCxLQUFLSCxLQUFMLENBQVdDLFlBQXhFO0FBQ0EsYUFBT0csU0FBUDtBQUNEOzs7d0JBdERpQjtBQUNoQixhQUFPLElBQVA7QUFDRDs7Ozs7O2tCQVBrQm5CLGMiLCJmaWxlIjoiY29tcG9zaXRlLWxheWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE1IC0gMjAxNyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCBMYXllciBmcm9tICcuL2xheWVyJztcbmltcG9ydCB7bG9nfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcG9zaXRlTGF5ZXIgZXh0ZW5kcyBMYXllciB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgZ2V0IGlzQ29tcG9zaXRlKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gaW5pdGlhbGl6ZVN0YXRlIGlzIHVzdWFsbHkgbm90IG5lZWRlZCBmb3IgY29tcG9zaXRlIGxheWVyc1xuICAvLyBQcm92aWRlIGVtcHR5IGRlZmluaXRpb24gdG8gZGlzYWJsZSBjaGVjayBmb3IgbWlzc2luZyBkZWZpbml0aW9uXG4gIGluaXRpYWxpemVTdGF0ZSgpIHtcbiAgfVxuXG4gIC8vIE5vLW9wIGZvciB0aGUgaW52YWxpZGF0ZUF0dHJpYnV0ZSBmdW5jdGlvbiBhcyB0aGUgY29tcG9zaXRlXG4gIC8vIGxheWVyIGhhcyBubyBBdHRyaWJ1dGVNYW5hZ2VyXG4gIGludmFsaWRhdGVBdHRyaWJ1dGUoKSB7XG4gIH1cblxuICAvLyBjYWxsZWQgdG8gYXVnbWVudCB0aGUgaW5mbyBvYmplY3QgdGhhdCBpcyBidWJibGVkIHVwIGZyb20gYSBzdWJsYXllclxuICAvLyBvdmVycmlkZSBMYXllci5nZXRQaWNraW5nSW5mbygpIGJlY2F1c2UgZGVjb2RpbmcgLyBzZXR0aW5nIHVuaWZvcm0gZG9cbiAgLy8gbm90IGFwcGx5IHRvIGEgY29tcG9zaXRlIGxheWVyLlxuICAvLyBAcmV0dXJuIG51bGwgdG8gY2FuY2VsIGV2ZW50XG4gIGdldFBpY2tpbmdJbmZvKHtpbmZvfSkge1xuICAgIHJldHVybiBpbmZvO1xuICB9XG5cbiAgLy8gSW1wbGVtZW50IHRvIGdlbmVyYXRlIHN1YmxheWVyc1xuICByZW5kZXJMYXllcnMoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBSZXR1cm5zIHByb3BzIHRoYXQgc2hvdWxkIGJlIGZvcndhcmRlZCB0byBjaGlsZHJlblxuICAvLyBUT0RPIC0gaW1wbGVtZW50IGF1dG9mb3J3YXJkaW5nP1xuICBnZXRCYXNlTGF5ZXJQcm9wcygpIHtcbiAgICBjb25zdCB7XG4gICAgICBvcGFjaXR5LCBwaWNrYWJsZSwgdmlzaWJsZSxcbiAgICAgIHBhcmFtZXRlcnMsIGdldFBvbHlnb25PZmZzZXQsXG4gICAgICBoaWdobGlnaHRlZE9iamVjdEluZGV4LCBhdXRvSGlnaGxpZ2h0LCBoaWdobGlnaHRDb2xvcixcbiAgICAgIGNvb3JkaW5hdGVTeXN0ZW0sIGNvb3JkaW5hdGVPcmlnaW4sIG1vZGVsTWF0cml4XG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4ge1xuICAgICAgb3BhY2l0eSwgcGlja2FibGUsIHZpc2libGUsXG4gICAgICBwYXJhbWV0ZXJzLCBnZXRQb2x5Z29uT2Zmc2V0LFxuICAgICAgaGlnaGxpZ2h0ZWRPYmplY3RJbmRleCwgYXV0b0hpZ2hsaWdodCwgaGlnaGxpZ2h0Q29sb3IsXG4gICAgICBjb29yZGluYXRlU3lzdGVtLCBjb29yZGluYXRlT3JpZ2luLCBtb2RlbE1hdHJpeFxuICAgIH07XG4gIH1cblxuICBfcmVuZGVyTGF5ZXJzKHVwZGF0ZVBhcmFtcykge1xuICAgIGlmICh0aGlzLnN0YXRlLm9sZFN1YkxheWVycyAmJiAhdGhpcy5zaG91bGRVcGRhdGVTdGF0ZSh1cGRhdGVQYXJhbXMpKSB7XG4gICAgICBsb2cubG9nKDIsIGBDb21wb3NpdGUgbGF5ZXIgcmV1c2VkIHN1YmxheWVycyAke3RoaXN9YCwgdGhpcy5zdGF0ZS5vbGRTdWJMYXllcnMpO1xuICAgICAgcmV0dXJuIHRoaXMuc3RhdGUub2xkU3ViTGF5ZXJzO1xuICAgIH1cbiAgICBjb25zdCBzdWJMYXllcnMgPSB0aGlzLnJlbmRlckxheWVycygpO1xuICAgIHRoaXMuc3RhdGUub2xkU3ViTGF5ZXJzID0gc3ViTGF5ZXJzO1xuICAgIGxvZy5sb2coMiwgYENvbXBvc2l0ZSBsYXllciByZW5kZXJlZCBuZXcgc3VibGF5ZXJzICR7dGhpc31gLCB0aGlzLnN0YXRlLm9sZFN1YkxheWVycyk7XG4gICAgcmV0dXJuIHN1YkxheWVycztcbiAgfVxufVxuIl19