"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.formatTime = formatTime;
exports.leftPad = leftPad;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Stats = function () {
  function Stats(_ref) {
    var id = _ref.id;

    _classCallCheck(this, Stats);

    this.id = id;
    this.time = 0;
    this.total = 0;
    this.average = 0;
    this.count = 0;

    this._time = 0;
  }

  _createClass(Stats, [{
    key: "timeStart",
    value: function timeStart() {
      this._time = this.timestampMs();
    }
  }, {
    key: "timeEnd",
    value: function timeEnd() {
      this.time = this.timestampMs() - this._time;
      this.total += this.time;
      this.count++;
      this.average = this.total / this.count;
    }
  }, {
    key: "timestampMs",
    value: function timestampMs() {
      /* global window */
      return (typeof window === "undefined" ? "undefined" : _typeof(window)) !== undefined && window.performance ? window.performance.now() : Date.now();
    }
  }, {
    key: "getTimeString",
    value: function getTimeString() {
      return this.id + ":" + formatTime(this.time) + "(" + this.count + ")";
    }
  }]);

  return Stats;
}();

// TODO: Currently unused, keeping in case we want it later for log formatting


exports.default = Stats;
function formatTime(ms) {
  var formatted = void 0;
  if (ms < 10) {
    formatted = ms.toFixed(2) + "ms";
  } else if (ms < 100) {
    formatted = ms.toFixed(1) + "ms";
  } else if (ms < 1000) {
    formatted = ms.toFixed(0) + "ms";
  } else {
    formatted = (ms / 1000).toFixed(2) + "s";
  }
  return formatted;
}

function leftPad(string) {
  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;

  while (string.length < length) {
    string = " " + string;
  }
  return string;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3JlL2xpYi9zdGF0cy5qcyJdLCJuYW1lcyI6WyJmb3JtYXRUaW1lIiwibGVmdFBhZCIsIlN0YXRzIiwiaWQiLCJ0aW1lIiwidG90YWwiLCJhdmVyYWdlIiwiY291bnQiLCJfdGltZSIsInRpbWVzdGFtcE1zIiwid2luZG93IiwidW5kZWZpbmVkIiwicGVyZm9ybWFuY2UiLCJub3ciLCJEYXRlIiwibXMiLCJmb3JtYXR0ZWQiLCJ0b0ZpeGVkIiwic3RyaW5nIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O1FBb0NnQkEsVSxHQUFBQSxVO1FBY0FDLE8sR0FBQUEsTzs7OztJQWpES0MsSztBQUNuQix1QkFBa0I7QUFBQSxRQUFMQyxFQUFLLFFBQUxBLEVBQUs7O0FBQUE7O0FBQ2hCLFNBQUtBLEVBQUwsR0FBVUEsRUFBVjtBQUNBLFNBQUtDLElBQUwsR0FBWSxDQUFaO0FBQ0EsU0FBS0MsS0FBTCxHQUFhLENBQWI7QUFDQSxTQUFLQyxPQUFMLEdBQWUsQ0FBZjtBQUNBLFNBQUtDLEtBQUwsR0FBYSxDQUFiOztBQUVBLFNBQUtDLEtBQUwsR0FBYSxDQUFiO0FBQ0Q7Ozs7Z0NBRVc7QUFDVixXQUFLQSxLQUFMLEdBQWEsS0FBS0MsV0FBTCxFQUFiO0FBQ0Q7Ozs4QkFFUztBQUNSLFdBQUtMLElBQUwsR0FBWSxLQUFLSyxXQUFMLEtBQXFCLEtBQUtELEtBQXRDO0FBQ0EsV0FBS0gsS0FBTCxJQUFjLEtBQUtELElBQW5CO0FBQ0EsV0FBS0csS0FBTDtBQUNBLFdBQUtELE9BQUwsR0FBZSxLQUFLRCxLQUFMLEdBQWEsS0FBS0UsS0FBakM7QUFDRDs7O2tDQUVhO0FBQ1o7QUFDQSxhQUFPLFFBQU9HLE1BQVAseUNBQU9BLE1BQVAsT0FBa0JDLFNBQWxCLElBQStCRCxPQUFPRSxXQUF0QyxHQUNMRixPQUFPRSxXQUFQLENBQW1CQyxHQUFuQixFQURLLEdBRUxDLEtBQUtELEdBQUwsRUFGRjtBQUdEOzs7b0NBRWU7QUFDZCxhQUFVLEtBQUtWLEVBQWYsU0FBcUJILFdBQVcsS0FBS0ksSUFBaEIsQ0FBckIsU0FBOEMsS0FBS0csS0FBbkQ7QUFDRDs7Ozs7O0FBR0g7OztrQkFsQ3FCTCxLO0FBbUNkLFNBQVNGLFVBQVQsQ0FBb0JlLEVBQXBCLEVBQXdCO0FBQzdCLE1BQUlDLGtCQUFKO0FBQ0EsTUFBSUQsS0FBSyxFQUFULEVBQWE7QUFDWEMsZ0JBQWVELEdBQUdFLE9BQUgsQ0FBVyxDQUFYLENBQWY7QUFDRCxHQUZELE1BRU8sSUFBSUYsS0FBSyxHQUFULEVBQWM7QUFDbkJDLGdCQUFlRCxHQUFHRSxPQUFILENBQVcsQ0FBWCxDQUFmO0FBQ0QsR0FGTSxNQUVBLElBQUlGLEtBQUssSUFBVCxFQUFlO0FBQ3BCQyxnQkFBZUQsR0FBR0UsT0FBSCxDQUFXLENBQVgsQ0FBZjtBQUNELEdBRk0sTUFFQTtBQUNMRCxnQkFBZSxDQUFDRCxLQUFLLElBQU4sRUFBWUUsT0FBWixDQUFvQixDQUFwQixDQUFmO0FBQ0Q7QUFDRCxTQUFPRCxTQUFQO0FBQ0Q7O0FBRU0sU0FBU2YsT0FBVCxDQUFpQmlCLE1BQWpCLEVBQXFDO0FBQUEsTUFBWkMsTUFBWSx1RUFBSCxDQUFHOztBQUMxQyxTQUFPRCxPQUFPQyxNQUFQLEdBQWdCQSxNQUF2QixFQUErQjtBQUM3QkQsbUJBQWFBLE1BQWI7QUFDRDtBQUNELFNBQU9BLE1BQVA7QUFDRCIsImZpbGUiOiJzdGF0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhdHMge1xuICBjb25zdHJ1Y3Rvcih7aWR9KSB7XG4gICAgdGhpcy5pZCA9IGlkO1xuICAgIHRoaXMudGltZSA9IDA7XG4gICAgdGhpcy50b3RhbCA9IDA7XG4gICAgdGhpcy5hdmVyYWdlID0gMDtcbiAgICB0aGlzLmNvdW50ID0gMDtcblxuICAgIHRoaXMuX3RpbWUgPSAwO1xuICB9XG5cbiAgdGltZVN0YXJ0KCkge1xuICAgIHRoaXMuX3RpbWUgPSB0aGlzLnRpbWVzdGFtcE1zKCk7XG4gIH1cblxuICB0aW1lRW5kKCkge1xuICAgIHRoaXMudGltZSA9IHRoaXMudGltZXN0YW1wTXMoKSAtIHRoaXMuX3RpbWU7XG4gICAgdGhpcy50b3RhbCArPSB0aGlzLnRpbWU7XG4gICAgdGhpcy5jb3VudCsrO1xuICAgIHRoaXMuYXZlcmFnZSA9IHRoaXMudG90YWwgLyB0aGlzLmNvdW50O1xuICB9XG5cbiAgdGltZXN0YW1wTXMoKSB7XG4gICAgLyogZ2xvYmFsIHdpbmRvdyAqL1xuICAgIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSB1bmRlZmluZWQgJiYgd2luZG93LnBlcmZvcm1hbmNlID9cbiAgICAgIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSA6XG4gICAgICBEYXRlLm5vdygpO1xuICB9XG5cbiAgZ2V0VGltZVN0cmluZygpIHtcbiAgICByZXR1cm4gYCR7dGhpcy5pZH06JHtmb3JtYXRUaW1lKHRoaXMudGltZSl9KCR7dGhpcy5jb3VudH0pYDtcbiAgfVxufVxuXG4vLyBUT0RPOiBDdXJyZW50bHkgdW51c2VkLCBrZWVwaW5nIGluIGNhc2Ugd2Ugd2FudCBpdCBsYXRlciBmb3IgbG9nIGZvcm1hdHRpbmdcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRUaW1lKG1zKSB7XG4gIGxldCBmb3JtYXR0ZWQ7XG4gIGlmIChtcyA8IDEwKSB7XG4gICAgZm9ybWF0dGVkID0gYCR7bXMudG9GaXhlZCgyKX1tc2A7XG4gIH0gZWxzZSBpZiAobXMgPCAxMDApIHtcbiAgICBmb3JtYXR0ZWQgPSBgJHttcy50b0ZpeGVkKDEpfW1zYDtcbiAgfSBlbHNlIGlmIChtcyA8IDEwMDApIHtcbiAgICBmb3JtYXR0ZWQgPSBgJHttcy50b0ZpeGVkKDApfW1zYDtcbiAgfSBlbHNlIHtcbiAgICBmb3JtYXR0ZWQgPSBgJHsobXMgLyAxMDAwKS50b0ZpeGVkKDIpfXNgO1xuICB9XG4gIHJldHVybiBmb3JtYXR0ZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsZWZ0UGFkKHN0cmluZywgbGVuZ3RoID0gOCkge1xuICB3aGlsZSAoc3RyaW5nLmxlbmd0aCA8IGxlbmd0aCkge1xuICAgIHN0cmluZyA9IGAgJHtzdHJpbmd9YDtcbiAgfVxuICByZXR1cm4gc3RyaW5nO1xufVxuIl19