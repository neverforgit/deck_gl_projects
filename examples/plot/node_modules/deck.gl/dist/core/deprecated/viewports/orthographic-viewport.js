'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _firstPersonViewport = require('../../viewports/first-person-viewport');

var _firstPersonViewport2 = _interopRequireDefault(_firstPersonViewport);

var _lookAt = require('gl-mat4/lookAt');

var _lookAt2 = _interopRequireDefault(_lookAt);

var _ortho = require('gl-mat4/ortho');

var _ortho2 = _interopRequireDefault(_ortho);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

var OrthographicViewport = function (_FirstPersonViewport) {
  _inherits(OrthographicViewport, _FirstPersonViewport);

  function OrthographicViewport(_ref) {
    var width = _ref.width,
        height = _ref.height,
        _ref$eye = _ref.eye,
        eye = _ref$eye === undefined ? [0, 0, 1] : _ref$eye,
        _ref$lookAt = _ref.lookAt,
        lookAt = _ref$lookAt === undefined ? [0, 0, 0] : _ref$lookAt,
        _ref$up = _ref.up,
        up = _ref$up === undefined ? [0, 1, 0] : _ref$up,
        _ref$near = _ref.near,
        near = _ref$near === undefined ? 1 : _ref$near,
        _ref$far = _ref.far,
        far = _ref$far === undefined ? 100 : _ref$far,
        left = _ref.left,
        top = _ref.top,
        _ref$right = _ref.right,
        right = _ref$right === undefined ? null : _ref$right,
        _ref$bottom = _ref.bottom,
        bottom = _ref$bottom === undefined ? null : _ref$bottom;

    _classCallCheck(this, OrthographicViewport);

    right = Number.isFinite(right) ? right : left + width;
    bottom = Number.isFinite(bottom) ? bottom : top + height;
    return _possibleConstructorReturn(this, (OrthographicViewport.__proto__ || Object.getPrototypeOf(OrthographicViewport)).call(this, {
      viewMatrix: (0, _lookAt2.default)([], eye, lookAt, up),
      projectionMatrix: (0, _ortho2.default)([], left, right, bottom, top, near, far),
      width: width,
      height: height
    }));
  }

  return OrthographicViewport;
}(_firstPersonViewport2.default);

exports.default = OrthographicViewport;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb3JlL2RlcHJlY2F0ZWQvdmlld3BvcnRzL29ydGhvZ3JhcGhpYy12aWV3cG9ydC5qcyJdLCJuYW1lcyI6WyJPcnRob2dyYXBoaWNWaWV3cG9ydCIsIndpZHRoIiwiaGVpZ2h0IiwiZXllIiwibG9va0F0IiwidXAiLCJuZWFyIiwiZmFyIiwibGVmdCIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJ2aWV3TWF0cml4IiwicHJvamVjdGlvbk1hdHJpeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBb0JBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7OzsrZUF0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0lBTXFCQSxvQjs7O0FBQ25CLHNDQWdCRztBQUFBLFFBZERDLEtBY0MsUUFkREEsS0FjQztBQUFBLFFBYkRDLE1BYUMsUUFiREEsTUFhQztBQUFBLHdCQVhEQyxHQVdDO0FBQUEsUUFYREEsR0FXQyw0QkFYSyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQVdMO0FBQUEsMkJBVkRDLE1BVUM7QUFBQSxRQVZEQSxNQVVDLCtCQVZRLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBVVI7QUFBQSx1QkFUREMsRUFTQztBQUFBLFFBVERBLEVBU0MsMkJBVEksQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsQ0FTSjtBQUFBLHlCQVBEQyxJQU9DO0FBQUEsUUFQREEsSUFPQyw2QkFQTSxDQU9OO0FBQUEsd0JBTkRDLEdBTUM7QUFBQSxRQU5EQSxHQU1DLDRCQU5LLEdBTUw7QUFBQSxRQUxEQyxJQUtDLFFBTERBLElBS0M7QUFBQSxRQUpEQyxHQUlDLFFBSkRBLEdBSUM7QUFBQSwwQkFGREMsS0FFQztBQUFBLFFBRkRBLEtBRUMsOEJBRk8sSUFFUDtBQUFBLDJCQUREQyxNQUNDO0FBQUEsUUFEREEsTUFDQywrQkFEUSxJQUNSOztBQUFBOztBQUNERCxZQUFRRSxPQUFPQyxRQUFQLENBQWdCSCxLQUFoQixJQUF5QkEsS0FBekIsR0FBaUNGLE9BQU9QLEtBQWhEO0FBQ0FVLGFBQVNDLE9BQU9DLFFBQVAsQ0FBZ0JGLE1BQWhCLElBQTBCQSxNQUExQixHQUFtQ0YsTUFBTVAsTUFBbEQ7QUFGQyx1SUFHSztBQUNKWSxrQkFBWSxzQkFBWSxFQUFaLEVBQWdCWCxHQUFoQixFQUFxQkMsTUFBckIsRUFBNkJDLEVBQTdCLENBRFI7QUFFSlUsd0JBQWtCLHFCQUFXLEVBQVgsRUFBZVAsSUFBZixFQUFxQkUsS0FBckIsRUFBNEJDLE1BQTVCLEVBQW9DRixHQUFwQyxFQUF5Q0gsSUFBekMsRUFBK0NDLEdBQS9DLENBRmQ7QUFHSk4sa0JBSEk7QUFJSkM7QUFKSSxLQUhMO0FBU0Y7Ozs7O2tCQTFCa0JGLG9CIiwiZmlsZSI6Im9ydGhvZ3JhcGhpYy12aWV3cG9ydC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNSAtIDIwMTcgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQgRmlyc3RQZXJzb25WaWV3cG9ydCBmcm9tICcuLi8uLi92aWV3cG9ydHMvZmlyc3QtcGVyc29uLXZpZXdwb3J0JztcbmltcG9ydCBtYXQ0X2xvb2tBdCBmcm9tICdnbC1tYXQ0L2xvb2tBdCc7XG5pbXBvcnQgbWF0NF9vcnRobyBmcm9tICdnbC1tYXQ0L29ydGhvJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3J0aG9ncmFwaGljVmlld3BvcnQgZXh0ZW5kcyBGaXJzdFBlcnNvblZpZXdwb3J0IHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIC8vIHZpZXdwb3J0IGFyZ3VtZW50c1xuICAgIHdpZHRoLCAvLyBXaWR0aCBvZiB2aWV3cG9ydFxuICAgIGhlaWdodCwgLy8gSGVpZ2h0IG9mIHZpZXdwb3J0XG4gICAgLy8gdmlldyBtYXRyaXggYXJndW1lbnRzXG4gICAgZXllID0gWzAsIDAsIDFdLCAvLyBEZWZpbmVzIGV5ZSBwb3NpdGlvbiwgZGVmYXVsdCB1bml0IGRpc3RhbmNlIGFsb25nIHogYXhpc1xuICAgIGxvb2tBdCA9IFswLCAwLCAwXSwgLy8gV2hpY2ggcG9pbnQgaXMgY2FtZXJhIGxvb2tpbmcgYXQsIGRlZmF1bHQgb3JpZ2luXG4gICAgdXAgPSBbMCwgMSwgMF0sIC8vIERlZmluZXMgdXAgZGlyZWN0aW9uLCBkZWZhdWx0IHBvc2l0aXZlIHkgYXhpc1xuICAgIC8vIHByb2plY3Rpb24gbWF0cml4IGFyZ3VtZW50c1xuICAgIG5lYXIgPSAxLCAvLyBEaXN0YW5jZSBvZiBuZWFyIGNsaXBwaW5nIHBsYW5lXG4gICAgZmFyID0gMTAwLCAvLyBEaXN0YW5jZSBvZiBmYXIgY2xpcHBpbmcgcGxhbmVcbiAgICBsZWZ0LCAvLyBMZWZ0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gICAgdG9wLCAvLyBUb3AgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAgICAvLyBhdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZWRcbiAgICByaWdodCA9IG51bGwsIC8vIFJpZ2h0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gICAgYm90dG9tID0gbnVsbCAvLyBCb3R0b20gYm91bmQgb2YgdGhlIGZydXN0dW1cbiAgfSkge1xuICAgIHJpZ2h0ID0gTnVtYmVyLmlzRmluaXRlKHJpZ2h0KSA/IHJpZ2h0IDogbGVmdCArIHdpZHRoO1xuICAgIGJvdHRvbSA9IE51bWJlci5pc0Zpbml0ZShib3R0b20pID8gYm90dG9tIDogdG9wICsgaGVpZ2h0O1xuICAgIHN1cGVyKHtcbiAgICAgIHZpZXdNYXRyaXg6IG1hdDRfbG9va0F0KFtdLCBleWUsIGxvb2tBdCwgdXApLFxuICAgICAgcHJvamVjdGlvbk1hdHJpeDogbWF0NF9vcnRobyhbXSwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIpLFxuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHRcbiAgICB9KTtcbiAgfVxufVxuIl19