// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/* global window */
import { GL, withParameters, setParameters } from 'luma.gl';
import { log } from './utils';

var renderCount = 0;

// TODO - Exported for pick-layers.js - Move to util?
export var getPixelRatio = function getPixelRatio(_ref) {
  var useDevicePixelRatio = _ref.useDevicePixelRatio;
  return useDevicePixelRatio && typeof window !== 'undefined' ? window.devicePixelRatio : 1;
};

// Convert viewport top-left CSS coordinates to bottom up WebGL coordinates
var getGLViewport = function getGLViewport(gl, _ref2) {
  var viewport = _ref2.viewport,
      pixelRatio = _ref2.pixelRatio;

  var width = gl.canvas.clientWidth;
  var height = gl.canvas.clientHeight;
  // Convert viewport top-left CSS coordinates to bottom up WebGL coordinates
  var dimensions = viewport.getDimensions({ width: width, height: height });
  return [dimensions.x * pixelRatio, (height - dimensions.y - dimensions.height) * pixelRatio, dimensions.width * pixelRatio, dimensions.height * pixelRatio];
};

// Helper functions

function clearCanvas(gl, _ref3) {
  var useDevicePixelRatio = _ref3.useDevicePixelRatio;

  // const pixelRatio = getPixelRatio({useDevicePixelRatio});
  var width = gl.drawingBufferWidth;
  var height = gl.drawingBufferHeight;
  // clear depth and color buffers, restoring transparency
  withParameters(gl, { viewport: [0, 0, width, height] }, function () {
    gl.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);
  });
}

// Draw a list of layers in a list of viewports
export function drawLayers(gl, _ref4) {
  var layers = _ref4.layers,
      viewports = _ref4.viewports,
      onViewportActive = _ref4.onViewportActive,
      useDevicePixelRatio = _ref4.useDevicePixelRatio,
      _ref4$drawPickingColo = _ref4.drawPickingColors,
      drawPickingColors = _ref4$drawPickingColo === undefined ? false : _ref4$drawPickingColo,
      _ref4$deviceRect = _ref4.deviceRect,
      deviceRect = _ref4$deviceRect === undefined ? null : _ref4$deviceRect,
      _ref4$parameters = _ref4.parameters,
      parameters = _ref4$parameters === undefined ? {} : _ref4$parameters,
      _ref4$pass = _ref4.pass,
      pass = _ref4$pass === undefined ? 'draw' : _ref4$pass;

  clearCanvas(gl, { useDevicePixelRatio: useDevicePixelRatio });

  // effectManager.preDraw();

  viewports.forEach(function (viewportOrDescriptor, i) {
    var viewport = getViewportFromDescriptor(viewportOrDescriptor);

    // Update context to point to this viewport
    onViewportActive(viewport);

    // render this viewport
    drawLayersInViewport(gl, {
      layers: layers,
      viewport: viewport,
      useDevicePixelRatio: useDevicePixelRatio,
      drawPickingColors: drawPickingColors,
      deviceRect: deviceRect,
      parameters: parameters,
      pass: pass
    });
  });

  // effectManager.draw();
}

// Draws list of layers and viewports into the picking buffer
// Note: does not sample the buffer, that has to be done by the caller
export function drawPickingBuffer(gl, _ref5) {
  var layers = _ref5.layers,
      viewports = _ref5.viewports,
      onViewportActive = _ref5.onViewportActive,
      useDevicePixelRatio = _ref5.useDevicePixelRatio,
      pickingFBO = _ref5.pickingFBO,
      _ref5$deviceRect = _ref5.deviceRect,
      x = _ref5$deviceRect.x,
      y = _ref5$deviceRect.y,
      width = _ref5$deviceRect.width,
      height = _ref5$deviceRect.height;

  // Make sure we clear scissor test and fbo bindings in case of exceptions
  // We are only interested in one pixel, no need to render anything else
  // Note that the callback here is called synchronously.
  // Set blend mode for picking
  // always overwrite existing pixel with [r,g,b,layerIndex]
  return withParameters(gl, {
    framebuffer: pickingFBO,
    scissorTest: true,
    scissor: [x, y, width, height],
    clearColor: [0, 0, 0, 0]
  }, function () {

    drawLayers(gl, {
      layers: layers,
      viewports: viewports,
      onViewportActive: onViewportActive,
      useDevicePixelRatio: useDevicePixelRatio,
      drawPickingColors: true,
      pass: 'picking',
      parameters: {
        blend: true,
        blendFunc: [gl.ONE, gl.ZERO, gl.CONSTANT_ALPHA, gl.ZERO],
        blendEquation: gl.FUNC_ADD,
        blendColor: [0, 0, 0, 0]
      }
    });
  });
}

// Draws a list of layers in one viewport
// TODO - when picking we could completely skip rendering viewports that dont
// intersect with the picking rect
function drawLayersInViewport(gl, _ref6) {
  var layers = _ref6.layers,
      viewport = _ref6.viewport,
      useDevicePixelRatio = _ref6.useDevicePixelRatio,
      _ref6$drawPickingColo = _ref6.drawPickingColors,
      drawPickingColors = _ref6$drawPickingColo === undefined ? false : _ref6$drawPickingColo,
      _ref6$deviceRect = _ref6.deviceRect,
      deviceRect = _ref6$deviceRect === undefined ? null : _ref6$deviceRect,
      _ref6$parameters = _ref6.parameters,
      parameters = _ref6$parameters === undefined ? {} : _ref6$parameters,
      _ref6$pass = _ref6.pass,
      pass = _ref6$pass === undefined ? 'draw' : _ref6$pass;

  var pixelRatio = getPixelRatio({ useDevicePixelRatio: useDevicePixelRatio });
  var glViewport = getGLViewport(gl, { viewport: viewport, pixelRatio: pixelRatio });

  // render layers in normal colors
  var visibleCount = 0;
  var compositeCount = 0;
  var pickableCount = 0;

  // const {x, y, width, height} = deviceRect || [];

  // TODO: Update all layers to use 'picking_uActive' (picking shader module)
  // and then remove 'renderPickingBuffer' and 'pickingEnabled'.
  var pickingUniforms = {
    picking_uActive: drawPickingColors ? 1 : 0,
    renderPickingBuffer: drawPickingColors ? 1 : 0,
    pickingEnabled: drawPickingColors ? 1 : 0
  };

  setParameters(gl, parameters || {});

  // render layers in normal colors
  layers.forEach(function (layer, layerIndex) {
    if (layer.isComposite) {
      compositeCount++;
    }

    if (layer.props.pickable) {
      pickableCount++;
    }

    if (layer.props.visible && (layer.props.pickable || !drawPickingColors)) {

      visibleCount++;

      if (!drawPickingColors) {
        updateLayerHighlightColor(layer);
        // TODO - Disable during picking
      }

      if (layer.state.model) {
        // Update project module parameters
        layer.state.model.updateModuleSettings(Object.assign({}, layer.props, {
          viewport: layer.context.viewport
        }));
      }

      var uniforms = Object.assign(pickingUniforms, layer.context.uniforms, { layerIndex: layerIndex });

      // Blend parameters must not be overriden
      var layerParameters = Object.assign({ viewport: glViewport }, layer.props.parameters || {});

      if (drawPickingColors) {
        Object.assign(layerParameters, {
          blendColor: [0, 0, 0, (layerIndex + 1) / 255]
        });
      }

      withParameters(gl, parameters, function () {
        layer.drawLayer({
          uniforms: uniforms,
          parameters: layerParameters
        });
      });
    }
  });

  var totalCount = layers.length;
  var primitiveCount = totalCount - compositeCount;
  var hiddenCount = primitiveCount - visibleCount;

  var message = '#' + renderCount++ + ': Rendering ' + pass + ' : ' + visibleCount + ' of ' + totalCount + ' layers (' + hiddenCount + ' hidden, ' + compositeCount + ' composite ' + pickableCount + ' unpickable) DPR={pixelRatio} pick={$drawPickingColors}';

  log.log(2, message);
}

// Get a viewport from a viewport descriptor (which can be a plain viewport)
function getViewportFromDescriptor(viewportOrDescriptor) {
  return viewportOrDescriptor.viewport ? viewportOrDescriptor.viewport : viewportOrDescriptor;
}

/**
 * Returns the picking color of currenlty selected object of the given 'layer'.
 * @return {Array} - the picking color or null if layers selected object is invalid.
 */
function updateLayerHighlightColor(layer) {
  // TODO - inefficient to update settings every render?
  // TODO: Add warning if 'highlightedObjectIndex' is > numberOfInstances of the model.

  // Update picking module settings if highlightedObjectIndex is set.
  // This will overwrite any settings from auto highlighting.
  var pickingSelectedColorValid = layer.props.highlightedObjectIndex >= 0;
  if (layer.state.model && pickingSelectedColorValid) {
    var pickingSelectedColor = layer.encodePickingColor(layer.props.highlightedObjectIndex);

    // TODO - handle multimodel layers?
    layer.state.model.updateModuleSettings({
      pickingSelectedColor: pickingSelectedColor,
      pickingSelectedColorValid: pickingSelectedColorValid
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,