'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _math = require('math.gl');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SphericalCoordinates = _math.experimental.SphericalCoordinates;


var MOVEMENT_SPEED = 1; // 1 meter per keyboard click
// const ROTATION_STEP_RADIANS = 0.03;
var ROTATION_STEP_DEGREES = 2;

var defaultState = {
  position: [0, 0, 0],
  lookAt: [0, 0, 0],
  up: [0, 0, 1],

  rotationX: 0,
  rotationY: 0,

  fov: 50,
  near: 1,
  far: 100
};

/* Helpers */

// Constrain number between bounds
function clamp(x, min, max) {
  return x < min ? min : x > max ? max : x;
}

function ensureFinite(value, fallbackValue) {
  return Number.isFinite(value) ? value : fallbackValue;
}

var FirstPersonState = function () {
  function FirstPersonState(_ref) {
    var width = _ref.width,
        height = _ref.height,
        position = _ref.position,
        direction = _ref.direction,
        bearing = _ref.bearing,
        pitch = _ref.pitch,
        longitude = _ref.longitude,
        latitude = _ref.latitude,
        zoom = _ref.zoom,
        _ref$syncBearing = _ref.syncBearing,
        syncBearing = _ref$syncBearing === undefined ? true : _ref$syncBearing,
        bounds = _ref.bounds,
        startPanEventPosition = _ref.startPanEventPosition,
        startPanPosition = _ref.startPanPosition,
        startRotateCenter = _ref.startRotateCenter,
        startRotateViewport = _ref.startRotateViewport,
        startZoomPos = _ref.startZoomPos,
        startZoom = _ref.startZoom;

    _classCallCheck(this, FirstPersonState);

    (0, _assert2.default)(Number.isFinite(width), '`width` must be supplied');
    (0, _assert2.default)(Number.isFinite(height), '`height` must be supplied');
    // assert(Number.isFinite(distance), '`distance` must be supplied');

    bearing = ensureFinite(bearing, defaultState.bearing);

    this._viewportProps = this._applyConstraints({
      width: width,
      height: height,
      position: new _math.Vector3(ensureFinite(position && position[0], defaultState.position[0]), ensureFinite(position && position[1], defaultState.position[1]), ensureFinite(position && position[2], defaultState.position[2])),
      direction: this._getDirectionFromBearing(bearing),
      bearing: bearing,
      pitch: ensureFinite(pitch, defaultState.pitch),
      longitude: longitude,
      latitude: latitude,
      zoom: zoom,
      bounds: bounds
    });

    this._interactiveState = {
      startPanEventPosition: startPanEventPosition,
      startPanPosition: startPanPosition,
      startRotateCenter: startRotateCenter,
      startRotateViewport: startRotateViewport,
      startZoomPos: startZoomPos,
      startZoom: startZoom
    };
  }

  /* Public API */

  _createClass(FirstPersonState, [{
    key: 'getViewportProps',
    value: function getViewportProps() {
      return this._viewportProps;
    }
  }, {
    key: 'getInteractiveState',
    value: function getInteractiveState() {
      return this._interactiveState;
    }
  }, {
    key: 'getLookAt',
    value: function getLookAt() {
      return [];
    }

    /**
     * Start panning
     * @param {[Number, Number]} pos - position on screen where the pointer grabs
     */

  }, {
    key: 'panStart',
    value: function panStart(_ref2) {
      var pos = _ref2.pos;
      var _viewportProps = this._viewportProps,
          translationX = _viewportProps.translationX,
          translationY = _viewportProps.translationY;


      return this._getUpdatedState({
        startPanPosition: [translationX, translationY],
        startPanEventPosition: pos
      });
    }

    /**
     * Pan
     * @param {[Number, Number]} pos - position on screen where the pointer is
     */

  }, {
    key: 'pan',
    value: function pan(_ref3) {
      var pos = _ref3.pos,
          startPos = _ref3.startPos;

      var startPanEventPosition = this._interactiveState.startPanEventPosition || startPos;
      (0, _assert2.default)(startPanEventPosition, '`startPanEventPosition` props is required');

      var _ref4 = this._interactiveState.startPanPosition || [],
          _ref5 = _slicedToArray(_ref4, 2),
          translationX = _ref5[0],
          translationY = _ref5[1];

      translationX = ensureFinite(translationX, this._viewportProps.translationX);
      translationY = ensureFinite(translationY, this._viewportProps.translationY);

      var deltaX = pos[0] - startPanEventPosition[0];
      var deltaY = pos[1] - startPanEventPosition[1];

      return this._getUpdatedState({
        translationX: translationX + deltaX,
        translationY: translationY - deltaY
      });
    }

    /**
     * End panning
     * Must call if `panStart()` was called
     */

  }, {
    key: 'panEnd',
    value: function panEnd() {
      return this._getUpdatedState({
        startPanPosition: null,
        startPanPos: null
      });
    }

    /**
     * Start rotating
     * @param {[Number, Number]} pos - position on screen where the pointer grabs
     */

  }, {
    key: 'rotateStart',
    value: function rotateStart(_ref6) {
      var pos = _ref6.pos;

      return this._getUpdatedState({
        startRotateCenter: this._viewportProps.position,
        startRotateViewport: this._viewportProps
      });
    }

    /**
     * Rotate
     * @param {[Number, Number]} pos - position on screen where the pointer is
     */

  }, {
    key: 'rotate',
    value: function rotate(_ref7) {
      var deltaScaleX = _ref7.deltaScaleX,
          deltaScaleY = _ref7.deltaScaleY;
      var direction = this._viewportProps.direction;


      return this._getUpdatedState({
        direction: new _math.Vector3(direction).rotateZ({ radians: deltaScaleX / 50 })
      });
    }

    /**
     * End rotating
     * Must call if `rotateStart()` was called
     */

  }, {
    key: 'rotateEnd',
    value: function rotateEnd() {
      return this._getUpdatedState({
        startRotateCenter: null,
        startRotateViewport: null
      });
    }

    /**
     * Start zooming
     * @param {[Number, Number]} pos - position on screen where the pointer grabs
     */

  }, {
    key: 'zoomStart',
    value: function zoomStart(_ref8) {
      var pos = _ref8.pos;

      return this._getUpdatedState({
        startZoomPos: pos,
        startZoom: this._viewportProps.zoom
      });
    }

    /**
     * Zoom
     * @param {[Number, Number]} pos - position on screen where the current center is
     * @param {[Number, Number]} startPos - the center position at
     *   the start of the operation. Must be supplied of `zoomStart()` was not called
     * @param {Number} scale - a number between [0, 1] specifying the accumulated
     *   relative scale.
     */

  }, {
    key: 'zoom',
    value: function zoom(_ref9) {
      var pos = _ref9.pos,
          startPos = _ref9.startPos,
          scale = _ref9.scale;
      var _viewportProps2 = this._viewportProps,
          zoom = _viewportProps2.zoom,
          minZoom = _viewportProps2.minZoom,
          maxZoom = _viewportProps2.maxZoom,
          width = _viewportProps2.width,
          height = _viewportProps2.height,
          translationX = _viewportProps2.translationX,
          translationY = _viewportProps2.translationY;


      var startZoomPos = this._interactiveState.startZoomPos || startPos || pos;

      var newZoom = clamp(zoom * scale, minZoom, maxZoom);
      var deltaX = pos[0] - startZoomPos[0];
      var deltaY = pos[1] - startZoomPos[1];

      // Zoom around the center position
      var cx = startZoomPos[0] - width / 2;
      var cy = height / 2 - startZoomPos[1];
      /* eslint-disable no-unused-vars */
      var newTranslationX = cx - (cx - translationX) * newZoom / zoom + deltaX;
      var newTranslationY = cy - (cy - translationY) * newZoom / zoom - deltaY;
      /* eslint-enable no-unused-vars */

      // return this._getUpdatedState({
      //   position
      //   translationX: newTranslationX,
      //   translationY: newTranslationY
      // });

      // TODO HACK
      return newZoom / zoom < 1 ? this.moveBackward() : this.moveForward();
    }

    /**
     * End zooming
     * Must call if `zoomStart()` was called
     */

  }, {
    key: 'zoomEnd',
    value: function zoomEnd() {
      return this._getUpdatedState({
        startZoomPos: null,
        startZoom: null
      });
    }
  }, {
    key: '_getDirectionFromBearing',
    value: function _getDirectionFromBearing(bearing) {
      var spherical = new SphericalCoordinates({
        bearing: bearing,
        pitch: 90
      });
      var direction = spherical.toVector3().normalize();
      return direction;
    }
  }, {
    key: 'moveLeft',
    value: function moveLeft() {
      // const {position, direction} = this._viewportProps;
      // const newDirection = new Vector3(direction).rotateZ({radians: ROTATION_STEP_RADIANS});
      // return this._getUpdatedState({
      //   direction: newDirection,
      //   lookAt: new Vector3(position).add(newDirection.normalize()),
      //   bearing: this._viewportProps.bearing - ROTATION_STEP_DEGREES
      // });

      var _viewportProps3 = this._viewportProps,
          position = _viewportProps3.position,
          bearing = _viewportProps3.bearing;

      var newBearing = bearing - ROTATION_STEP_DEGREES;
      var newDirection = this._getDirectionFromBearing(newBearing);
      return this._getUpdatedState({
        direction: newDirection,
        lookAt: new _math.Vector3(position).add(newDirection),
        bearing: newBearing
      });
    }
  }, {
    key: 'moveRight',
    value: function moveRight() {
      // const {position, direction} = this._viewportProps;
      // const newDirection = new Vector3(direction).rotateZ({radians: -ROTATION_STEP_RADIANS});
      // return this._getUpdatedState({
      //   direction: newDirection,
      //   lookAt: new Vector3(position).add(newDirection.normalize()),
      //   bearing: this._viewportProps.bearing + ROTATION_STEP_DEGREES
      // });

      var _viewportProps4 = this._viewportProps,
          position = _viewportProps4.position,
          bearing = _viewportProps4.bearing;

      var newBearing = bearing + ROTATION_STEP_DEGREES;
      var newDirection = this._getDirectionFromBearing(newBearing);
      return this._getUpdatedState({
        direction: newDirection,
        lookAt: new _math.Vector3(position).add(newDirection),
        bearing: newBearing
      });
    }
  }, {
    key: 'moveForward',
    value: function moveForward() {
      var _viewportProps5 = this._viewportProps,
          position = _viewportProps5.position,
          direction = _viewportProps5.direction;

      var delta = new _math.Vector3(direction).normalize().scale(MOVEMENT_SPEED);
      return this._getUpdatedState({
        // pitch: this._viewportProps.pitch + 3
        position: new _math.Vector3(position).add(delta),
        lookAt: new _math.Vector3(position).add(direction)
      });
    }
  }, {
    key: 'moveBackward',
    value: function moveBackward() {
      var _viewportProps6 = this._viewportProps,
          position = _viewportProps6.position,
          direction = _viewportProps6.direction;

      var delta = new _math.Vector3(direction).normalize().scale(-MOVEMENT_SPEED);
      return this._getUpdatedState({
        // pitch: this._viewportProps.pitch - 3
        position: new _math.Vector3(position).add(delta),
        lookAt: new _math.Vector3(position).add(direction)
      });
    }
  }, {
    key: 'moveUp',
    value: function moveUp() {
      var _viewportProps7 = this._viewportProps,
          position = _viewportProps7.position,
          direction = _viewportProps7.direction;

      var delta = [0, 0, 1];
      return this._getUpdatedState({
        // pitch: this._viewportProps.pitch + 3
        position: new _math.Vector3(position).add(delta),
        lookAt: new _math.Vector3(position).add(direction)
      });
    }
  }, {
    key: 'moveDown',
    value: function moveDown() {
      var _viewportProps8 = this._viewportProps,
          position = _viewportProps8.position,
          direction = _viewportProps8.direction;

      var delta = position[2] >= 1 ? [0, 0, -1] : [0, 0, 0];
      return this._getUpdatedState({
        // pitch: this._viewportProps.pitch + 3
        position: new _math.Vector3(position).add(delta),
        lookAt: new _math.Vector3(position).add(direction)
      });
    }
  }, {
    key: 'zoomIn',
    value: function zoomIn() {
      return this._getUpdatedState({
        zoom: this._viewportProps.zoom + 0.2
      });
    }
  }, {
    key: 'zoomOut',
    value: function zoomOut() {
      return this._getUpdatedState({
        zoom: this._viewportProps.zoom - 0.2
      });
    }

    /* Private methods */

  }, {
    key: '_getUpdatedState',
    value: function _getUpdatedState(newProps) {
      // Update _viewportProps
      return new FirstPersonState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));
    }

    // Apply any constraints (mathematical or defined by _viewportProps) to map state

  }, {
    key: '_applyConstraints',
    value: function _applyConstraints(props) {
      // TODO/ib - Ensure position is within bounds
      return props;
    }
  }]);

  return FirstPersonState;
}();

exports.default = FirstPersonState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,