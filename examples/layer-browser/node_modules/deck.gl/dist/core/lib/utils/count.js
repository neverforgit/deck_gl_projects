'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.count = count;
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

var ERR_NOT_OBJECT = 'count(): argument not an object';
var ERR_NOT_CONTAINER = 'count(): argument not a container';

/**
 * Deduces numer of elements in a JavaScript container.
 * - Auto-deduction for ES6 containers that define a count() method
 * - Auto-deduction for ES6 containers that define a size member
 * - Auto-deduction for Classic Arrays via the built-in length attribute
 * - Also handles objects, although note that this an O(N) operation
 */
function count(container) {
  if (!isObject(container)) {
    throw new Error(ERR_NOT_OBJECT);
  }

  // Check if ES6 collection "count" function is available
  if (typeof container.count === 'function') {
    return container.count();
  }

  // Check if ES6 collection "size" attribute is set
  if (Number.isFinite(container.size)) {
    return container.size;
  }

  // Check if array length attribute is set
  // Note: checking this last since some ES6 collections (Immutable.js)
  // emit profuse warnings when trying to access `length` attribute
  if (Number.isFinite(container.length)) {
    return container.length;
  }

  // Note that getting the count of an object is O(N)
  if (isPlainObject(container)) {
    var counter = 0;
    for (var key in container) {
      // eslint-disable-line
      counter++;
    }
    return counter;
  }

  throw new Error(ERR_NOT_CONTAINER);
}

/**
 * Checks if argument is a plain object (not a class or array etc)
 * @param {*} value - JavaScript value to be tested
 * @return {Boolean} - true if argument is a plain JavaScript object
 */
function isPlainObject(value) {
  return value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value.constructor === Object;
}

/**
 * Checks if argument is an indexable object (not a primitive value, nor null)
 * @param {*} value - JavaScript value to be tested
 * @return {Boolean} - true if argument is a JavaScript object
 */
function isObject(value) {
  return value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb3JlL2xpYi91dGlscy9jb3VudC5qcyJdLCJuYW1lcyI6WyJjb3VudCIsIkVSUl9OT1RfT0JKRUNUIiwiRVJSX05PVF9DT05UQUlORVIiLCJjb250YWluZXIiLCJpc09iamVjdCIsIkVycm9yIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJzaXplIiwibGVuZ3RoIiwiaXNQbGFpbk9iamVjdCIsImNvdW50ZXIiLCJrZXkiLCJ2YWx1ZSIsImNvbnN0cnVjdG9yIiwiT2JqZWN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztRQThCZ0JBLEssR0FBQUEsSztBQTlCaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBTUMsaUJBQWlCLGlDQUF2QjtBQUNBLElBQU1DLG9CQUFvQixtQ0FBMUI7O0FBRUE7Ozs7Ozs7QUFPTyxTQUFTRixLQUFULENBQWVHLFNBQWYsRUFBMEI7QUFDL0IsTUFBSSxDQUFDQyxTQUFTRCxTQUFULENBQUwsRUFBMEI7QUFDeEIsVUFBTSxJQUFJRSxLQUFKLENBQVVKLGNBQVYsQ0FBTjtBQUNEOztBQUVEO0FBQ0EsTUFBSSxPQUFPRSxVQUFVSCxLQUFqQixLQUEyQixVQUEvQixFQUEyQztBQUN6QyxXQUFPRyxVQUFVSCxLQUFWLEVBQVA7QUFDRDs7QUFFRDtBQUNBLE1BQUlNLE9BQU9DLFFBQVAsQ0FBZ0JKLFVBQVVLLElBQTFCLENBQUosRUFBcUM7QUFDbkMsV0FBT0wsVUFBVUssSUFBakI7QUFDRDs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxNQUFJRixPQUFPQyxRQUFQLENBQWdCSixVQUFVTSxNQUExQixDQUFKLEVBQXVDO0FBQ3JDLFdBQU9OLFVBQVVNLE1BQWpCO0FBQ0Q7O0FBRUQ7QUFDQSxNQUFJQyxjQUFjUCxTQUFkLENBQUosRUFBOEI7QUFDNUIsUUFBSVEsVUFBVSxDQUFkO0FBQ0EsU0FBSyxJQUFNQyxHQUFYLElBQWtCVCxTQUFsQixFQUE2QjtBQUFFO0FBQzdCUTtBQUNEO0FBQ0QsV0FBT0EsT0FBUDtBQUNEOztBQUVELFFBQU0sSUFBSU4sS0FBSixDQUFVSCxpQkFBVixDQUFOO0FBQ0Q7O0FBRUQ7Ozs7O0FBS0EsU0FBU1EsYUFBVCxDQUF1QkcsS0FBdkIsRUFBOEI7QUFDNUIsU0FBT0EsVUFBVSxJQUFWLElBQWtCLFFBQU9BLEtBQVAseUNBQU9BLEtBQVAsT0FBaUIsUUFBbkMsSUFBK0NBLE1BQU1DLFdBQU4sS0FBc0JDLE1BQTVFO0FBQ0Q7O0FBRUQ7Ozs7O0FBS0EsU0FBU1gsUUFBVCxDQUFrQlMsS0FBbEIsRUFBeUI7QUFDdkIsU0FBT0EsVUFBVSxJQUFWLElBQWtCLFFBQU9BLEtBQVAseUNBQU9BLEtBQVAsT0FBaUIsUUFBMUM7QUFDRCIsImZpbGUiOiJjb3VudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNSAtIDIwMTcgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5jb25zdCBFUlJfTk9UX09CSkVDVCA9ICdjb3VudCgpOiBhcmd1bWVudCBub3QgYW4gb2JqZWN0JztcbmNvbnN0IEVSUl9OT1RfQ09OVEFJTkVSID0gJ2NvdW50KCk6IGFyZ3VtZW50IG5vdCBhIGNvbnRhaW5lcic7XG5cbi8qKlxuICogRGVkdWNlcyBudW1lciBvZiBlbGVtZW50cyBpbiBhIEphdmFTY3JpcHQgY29udGFpbmVyLlxuICogLSBBdXRvLWRlZHVjdGlvbiBmb3IgRVM2IGNvbnRhaW5lcnMgdGhhdCBkZWZpbmUgYSBjb3VudCgpIG1ldGhvZFxuICogLSBBdXRvLWRlZHVjdGlvbiBmb3IgRVM2IGNvbnRhaW5lcnMgdGhhdCBkZWZpbmUgYSBzaXplIG1lbWJlclxuICogLSBBdXRvLWRlZHVjdGlvbiBmb3IgQ2xhc3NpYyBBcnJheXMgdmlhIHRoZSBidWlsdC1pbiBsZW5ndGggYXR0cmlidXRlXG4gKiAtIEFsc28gaGFuZGxlcyBvYmplY3RzLCBhbHRob3VnaCBub3RlIHRoYXQgdGhpcyBhbiBPKE4pIG9wZXJhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gY291bnQoY29udGFpbmVyKSB7XG4gIGlmICghaXNPYmplY3QoY29udGFpbmVyKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihFUlJfTk9UX09CSkVDVCk7XG4gIH1cblxuICAvLyBDaGVjayBpZiBFUzYgY29sbGVjdGlvbiBcImNvdW50XCIgZnVuY3Rpb24gaXMgYXZhaWxhYmxlXG4gIGlmICh0eXBlb2YgY29udGFpbmVyLmNvdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5jb3VudCgpO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgRVM2IGNvbGxlY3Rpb24gXCJzaXplXCIgYXR0cmlidXRlIGlzIHNldFxuICBpZiAoTnVtYmVyLmlzRmluaXRlKGNvbnRhaW5lci5zaXplKSkge1xuICAgIHJldHVybiBjb250YWluZXIuc2l6ZTtcbiAgfVxuXG4gIC8vIENoZWNrIGlmIGFycmF5IGxlbmd0aCBhdHRyaWJ1dGUgaXMgc2V0XG4gIC8vIE5vdGU6IGNoZWNraW5nIHRoaXMgbGFzdCBzaW5jZSBzb21lIEVTNiBjb2xsZWN0aW9ucyAoSW1tdXRhYmxlLmpzKVxuICAvLyBlbWl0IHByb2Z1c2Ugd2FybmluZ3Mgd2hlbiB0cnlpbmcgdG8gYWNjZXNzIGBsZW5ndGhgIGF0dHJpYnV0ZVxuICBpZiAoTnVtYmVyLmlzRmluaXRlKGNvbnRhaW5lci5sZW5ndGgpKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5sZW5ndGg7XG4gIH1cblxuICAvLyBOb3RlIHRoYXQgZ2V0dGluZyB0aGUgY291bnQgb2YgYW4gb2JqZWN0IGlzIE8oTilcbiAgaWYgKGlzUGxhaW5PYmplY3QoY29udGFpbmVyKSkge1xuICAgIGxldCBjb3VudGVyID0gMDtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBjb250YWluZXIpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gY291bnRlcjtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcihFUlJfTk9UX0NPTlRBSU5FUik7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGFyZ3VtZW50IGlzIGEgcGxhaW4gb2JqZWN0IChub3QgYSBjbGFzcyBvciBhcnJheSBldGMpXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gSmF2YVNjcmlwdCB2YWx1ZSB0byBiZSB0ZXN0ZWRcbiAqIEByZXR1cm4ge0Jvb2xlYW59IC0gdHJ1ZSBpZiBhcmd1bWVudCBpcyBhIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUuY29uc3RydWN0b3IgPT09IE9iamVjdDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYXJndW1lbnQgaXMgYW4gaW5kZXhhYmxlIG9iamVjdCAobm90IGEgcHJpbWl0aXZlIHZhbHVlLCBub3IgbnVsbClcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBKYXZhU2NyaXB0IHZhbHVlIHRvIGJlIHRlc3RlZFxuICogQHJldHVybiB7Qm9vbGVhbn0gLSB0cnVlIGlmIGFyZ3VtZW50IGlzIGEgSmF2YVNjcmlwdCBvYmplY3RcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCc7XG59XG5cbiJdfQ==