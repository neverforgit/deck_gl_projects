"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

exports.default = "// EXTERNAL CONSTANTS: these must match JavaScript constants in \"src/lib/constants.js\"\nconst float COORDINATE_SYSTEM_IDENTITY = 0.;\nconst float COORDINATE_SYSTEM_LNG_LAT = 1.;\nconst float COORDINATE_SYSTEM_METER_OFFSETS = 2.;\n\nuniform float project_uCoordinateSystem;\nuniform float project_uScale;\nuniform vec3 project_uPixelsPerUnit;\nuniform vec4 project_uCenter;\nuniform mat4 project_uModelMatrix;\nuniform mat4 project_uViewProjectionMatrix;\nuniform vec2 project_uViewportSize;\nuniform float project_uDevicePixelRatio;\nuniform float project_uFocalDistance;\nuniform vec3 project_uCameraPosition;\n\nconst float TILE_SIZE = 512.0;\nconst float PI = 3.1415926536;\nconst float WORLD_SCALE = TILE_SIZE / (PI * 2.0);\n\n//\n// Scaling offsets - scales meters to \"pixels\"\n// Note the scalar version of project_scale is for scaling the z component only\n//\nfloat project_scale(float meters) {\n  return meters * project_uPixelsPerUnit.z;\n}\n\nvec2 project_scale(vec2 meters) {\n  return meters * project_uPixelsPerUnit.xy;\n}\n\nvec3 project_scale(vec3 meters) {\n  return vec3(project_scale(meters.xy), project_scale(meters.z));\n}\n\nvec4 project_scale(vec4 meters) {\n  return vec4(project_scale(meters.xyz), meters.w);\n}\n\n//\n// Projecting positions - non-linear projection: lnglats => unit tile [0-1, 0-1]\n//\nvec2 project_mercator_(vec2 lnglat) {\n  return vec2(\n    radians(lnglat.x) + PI,\n    PI - log(tan_fp32(PI * 0.25 + radians(lnglat.y) * 0.5))\n  );\n}\n\n//\n// Projects lnglats (or meter offsets, depending on mode) to pixels\n//\nvec4 project_position(vec4 position) {\n  // TODO - why not simply subtract center and fall through?\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNG_LAT) {\n    return vec4(\n      project_mercator_(position.xy) * WORLD_SCALE * project_uScale,\n      project_scale(position.z),\n      position.w\n    );\n  }\n\n  // Apply model matrix\n  vec4 position_modelspace = project_uModelMatrix * position;\n  return project_scale(position_modelspace);\n}\n\nvec3 project_position(vec3 position) {\n  vec4 projected_position = project_position(vec4(position, 1.0));\n  return projected_position.xyz;\n}\n\nvec2 project_position(vec2 position) {\n  vec4 projected_position = project_position(vec4(position, 0.0, 1.0));\n  return projected_position.xy;\n}\n\n//\n// Projects from \"world\" coordinates to clip space.\n// Uses project_uViewProjectionMatrix\n//\nvec4 project_to_clipspace(vec4 position) {\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_METER_OFFSETS) {\n    // Needs to be divided with project_uPixelsPerUnit\n    position.w *= project_uPixelsPerUnit.z;\n  }\n  return project_uViewProjectionMatrix * position + project_uCenter;\n}\n\n// Returns a clip space offset that corresponds to a given number of **non-device** pixels\nvec4 project_pixel_to_clipspace(vec2 pixels) {\n  vec2 offset = pixels / project_uViewportSize * project_uDevicePixelRatio;\n  return vec4(offset * project_uFocalDistance, 0.0, 0.0);\n}\n";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb3JlL3NoYWRlcmxpYi9wcm9qZWN0L3Byb2plY3QuZ2xzbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6InByb2plY3QuZ2xzbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNSAtIDIwMTcgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5leHBvcnQgZGVmYXVsdCBgXFxcbi8vIEVYVEVSTkFMIENPTlNUQU5UUzogdGhlc2UgbXVzdCBtYXRjaCBKYXZhU2NyaXB0IGNvbnN0YW50cyBpbiBcInNyYy9saWIvY29uc3RhbnRzLmpzXCJcbmNvbnN0IGZsb2F0IENPT1JESU5BVEVfU1lTVEVNX0lERU5USVRZID0gMC47XG5jb25zdCBmbG9hdCBDT09SRElOQVRFX1NZU1RFTV9MTkdfTEFUID0gMS47XG5jb25zdCBmbG9hdCBDT09SRElOQVRFX1NZU1RFTV9NRVRFUl9PRkZTRVRTID0gMi47XG5cbnVuaWZvcm0gZmxvYXQgcHJvamVjdF91Q29vcmRpbmF0ZVN5c3RlbTtcbnVuaWZvcm0gZmxvYXQgcHJvamVjdF91U2NhbGU7XG51bmlmb3JtIHZlYzMgcHJvamVjdF91UGl4ZWxzUGVyVW5pdDtcbnVuaWZvcm0gdmVjNCBwcm9qZWN0X3VDZW50ZXI7XG51bmlmb3JtIG1hdDQgcHJvamVjdF91TW9kZWxNYXRyaXg7XG51bmlmb3JtIG1hdDQgcHJvamVjdF91Vmlld1Byb2plY3Rpb25NYXRyaXg7XG51bmlmb3JtIHZlYzIgcHJvamVjdF91Vmlld3BvcnRTaXplO1xudW5pZm9ybSBmbG9hdCBwcm9qZWN0X3VEZXZpY2VQaXhlbFJhdGlvO1xudW5pZm9ybSBmbG9hdCBwcm9qZWN0X3VGb2NhbERpc3RhbmNlO1xudW5pZm9ybSB2ZWMzIHByb2plY3RfdUNhbWVyYVBvc2l0aW9uO1xuXG5jb25zdCBmbG9hdCBUSUxFX1NJWkUgPSA1MTIuMDtcbmNvbnN0IGZsb2F0IFBJID0gMy4xNDE1OTI2NTM2O1xuY29uc3QgZmxvYXQgV09STERfU0NBTEUgPSBUSUxFX1NJWkUgLyAoUEkgKiAyLjApO1xuXG4vL1xuLy8gU2NhbGluZyBvZmZzZXRzIC0gc2NhbGVzIG1ldGVycyB0byBcInBpeGVsc1wiXG4vLyBOb3RlIHRoZSBzY2FsYXIgdmVyc2lvbiBvZiBwcm9qZWN0X3NjYWxlIGlzIGZvciBzY2FsaW5nIHRoZSB6IGNvbXBvbmVudCBvbmx5XG4vL1xuZmxvYXQgcHJvamVjdF9zY2FsZShmbG9hdCBtZXRlcnMpIHtcbiAgcmV0dXJuIG1ldGVycyAqIHByb2plY3RfdVBpeGVsc1BlclVuaXQuejtcbn1cblxudmVjMiBwcm9qZWN0X3NjYWxlKHZlYzIgbWV0ZXJzKSB7XG4gIHJldHVybiBtZXRlcnMgKiBwcm9qZWN0X3VQaXhlbHNQZXJVbml0Lnh5O1xufVxuXG52ZWMzIHByb2plY3Rfc2NhbGUodmVjMyBtZXRlcnMpIHtcbiAgcmV0dXJuIHZlYzMocHJvamVjdF9zY2FsZShtZXRlcnMueHkpLCBwcm9qZWN0X3NjYWxlKG1ldGVycy56KSk7XG59XG5cbnZlYzQgcHJvamVjdF9zY2FsZSh2ZWM0IG1ldGVycykge1xuICByZXR1cm4gdmVjNChwcm9qZWN0X3NjYWxlKG1ldGVycy54eXopLCBtZXRlcnMudyk7XG59XG5cbi8vXG4vLyBQcm9qZWN0aW5nIHBvc2l0aW9ucyAtIG5vbi1saW5lYXIgcHJvamVjdGlvbjogbG5nbGF0cyA9PiB1bml0IHRpbGUgWzAtMSwgMC0xXVxuLy9cbnZlYzIgcHJvamVjdF9tZXJjYXRvcl8odmVjMiBsbmdsYXQpIHtcbiAgcmV0dXJuIHZlYzIoXG4gICAgcmFkaWFucyhsbmdsYXQueCkgKyBQSSxcbiAgICBQSSAtIGxvZyh0YW5fZnAzMihQSSAqIDAuMjUgKyByYWRpYW5zKGxuZ2xhdC55KSAqIDAuNSkpXG4gICk7XG59XG5cbi8vXG4vLyBQcm9qZWN0cyBsbmdsYXRzIChvciBtZXRlciBvZmZzZXRzLCBkZXBlbmRpbmcgb24gbW9kZSkgdG8gcGl4ZWxzXG4vL1xudmVjNCBwcm9qZWN0X3Bvc2l0aW9uKHZlYzQgcG9zaXRpb24pIHtcbiAgLy8gVE9ETyAtIHdoeSBub3Qgc2ltcGx5IHN1YnRyYWN0IGNlbnRlciBhbmQgZmFsbCB0aHJvdWdoP1xuICBpZiAocHJvamVjdF91Q29vcmRpbmF0ZVN5c3RlbSA9PSBDT09SRElOQVRFX1NZU1RFTV9MTkdfTEFUKSB7XG4gICAgcmV0dXJuIHZlYzQoXG4gICAgICBwcm9qZWN0X21lcmNhdG9yXyhwb3NpdGlvbi54eSkgKiBXT1JMRF9TQ0FMRSAqIHByb2plY3RfdVNjYWxlLFxuICAgICAgcHJvamVjdF9zY2FsZShwb3NpdGlvbi56KSxcbiAgICAgIHBvc2l0aW9uLndcbiAgICApO1xuICB9XG5cbiAgLy8gQXBwbHkgbW9kZWwgbWF0cml4XG4gIHZlYzQgcG9zaXRpb25fbW9kZWxzcGFjZSA9IHByb2plY3RfdU1vZGVsTWF0cml4ICogcG9zaXRpb247XG4gIHJldHVybiBwcm9qZWN0X3NjYWxlKHBvc2l0aW9uX21vZGVsc3BhY2UpO1xufVxuXG52ZWMzIHByb2plY3RfcG9zaXRpb24odmVjMyBwb3NpdGlvbikge1xuICB2ZWM0IHByb2plY3RlZF9wb3NpdGlvbiA9IHByb2plY3RfcG9zaXRpb24odmVjNChwb3NpdGlvbiwgMS4wKSk7XG4gIHJldHVybiBwcm9qZWN0ZWRfcG9zaXRpb24ueHl6O1xufVxuXG52ZWMyIHByb2plY3RfcG9zaXRpb24odmVjMiBwb3NpdGlvbikge1xuICB2ZWM0IHByb2plY3RlZF9wb3NpdGlvbiA9IHByb2plY3RfcG9zaXRpb24odmVjNChwb3NpdGlvbiwgMC4wLCAxLjApKTtcbiAgcmV0dXJuIHByb2plY3RlZF9wb3NpdGlvbi54eTtcbn1cblxuLy9cbi8vIFByb2plY3RzIGZyb20gXCJ3b3JsZFwiIGNvb3JkaW5hdGVzIHRvIGNsaXAgc3BhY2UuXG4vLyBVc2VzIHByb2plY3RfdVZpZXdQcm9qZWN0aW9uTWF0cml4XG4vL1xudmVjNCBwcm9qZWN0X3RvX2NsaXBzcGFjZSh2ZWM0IHBvc2l0aW9uKSB7XG4gIGlmIChwcm9qZWN0X3VDb29yZGluYXRlU3lzdGVtID09IENPT1JESU5BVEVfU1lTVEVNX01FVEVSX09GRlNFVFMpIHtcbiAgICAvLyBOZWVkcyB0byBiZSBkaXZpZGVkIHdpdGggcHJvamVjdF91UGl4ZWxzUGVyVW5pdFxuICAgIHBvc2l0aW9uLncgKj0gcHJvamVjdF91UGl4ZWxzUGVyVW5pdC56O1xuICB9XG4gIHJldHVybiBwcm9qZWN0X3VWaWV3UHJvamVjdGlvbk1hdHJpeCAqIHBvc2l0aW9uICsgcHJvamVjdF91Q2VudGVyO1xufVxuXG4vLyBSZXR1cm5zIGEgY2xpcCBzcGFjZSBvZmZzZXQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGdpdmVuIG51bWJlciBvZiAqKm5vbi1kZXZpY2UqKiBwaXhlbHNcbnZlYzQgcHJvamVjdF9waXhlbF90b19jbGlwc3BhY2UodmVjMiBwaXhlbHMpIHtcbiAgdmVjMiBvZmZzZXQgPSBwaXhlbHMgLyBwcm9qZWN0X3VWaWV3cG9ydFNpemUgKiBwcm9qZWN0X3VEZXZpY2VQaXhlbFJhdGlvO1xuICByZXR1cm4gdmVjNChvZmZzZXQgKiBwcm9qZWN0X3VGb2NhbERpc3RhbmNlLCAwLjAsIDAuMCk7XG59XG5gO1xuIl19