'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.viewportLinearInterpolator = viewportLinearInterpolator;
exports.viewportFlyToInterpolator = viewportFlyToInterpolator;

var _viewportMercatorProject = require('viewport-mercator-project');

var _math = require('math.gl');

/* eslint max-statements: ["error", 50] */

var EPSILON = 0.01;

/**
 * Performs linear interpolation of two viewports.
 * @param {Object} startViewport - object containing starting viewport parameters.
 * @param {Object} endViewport - object containing ending viewport parameters.
 * @param {Number} t - animation step.
 * @return {Object} - animated viewport for given step.
*/
function viewportLinearInterpolator(startViewport, endViewport, t) {
  // here t is easing, check against actual t
  if (t >= 1.0) {
    return endViewport;
  }
  var animatedViewport = Object.assign({}, endViewport);
  function lerp(start, end, step) {
    return step * end + (1 - step) * start;
  }

  var _arr = ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];
  for (var _i = 0; _i < _arr.length; _i++) {
    var p = _arr[_i];
    var startValue = startViewport[p];
    var endValue = endViewport[p];
    animatedViewport[p] = lerp(startValue, endValue, t);
  }
  return animatedViewport;
}

/**
 * This method adapts mapbox-gl-js Map#flyTo animation so it can be used in
 * react/redux architecture.
 * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.
 * It implements “Smooth and efficient zooming and panning.” algorithm by
 * "Jarke J. van Wijk and Wim A.A. Nuij"
 *
 * @param {Object} startViewport - object containing starting viewport parameters.
 * @param {Object} endViewport - object containing ending viewport parameters.
 * @param {Number} t - animation step.
 * @return {Object} - animated viewport for given step.
*/
function viewportFlyToInterpolator(startViewport, endViewport, t) {
  // Equations from above paper are referred where needed.

  // here t is easing, check against actual t
  if (t >= 1.0) {
    return endViewport;
  }

  var animatedViewport = Object.assign({}, endViewport);

  function lerp(start, end, step) {
    return step * end + (1 - step) * start;
  }
  function zoomToScale(zoom) {
    return Math.pow(2, zoom);
  }
  function scaleToZoom(scale) {
    return Math.log(scale) / Math.LN2;
  }

  // TODO: add this as an option for applications.
  var rho = 1.414;

  var startZoom = startViewport.zoom;
  var startCenter = [startViewport.longitude, startViewport.latitude];
  var startScale = zoomToScale(startZoom);
  var endZoom = endViewport.zoom;
  var endCenter = [endViewport.longitude, endViewport.latitude];
  var scale = zoomToScale(endZoom - startZoom);

  var startCenterXY = new _math.Vector2((0, _viewportMercatorProject.projectFlat)(startCenter, startScale));
  var endCenterXY = new _math.Vector2((0, _viewportMercatorProject.projectFlat)(endCenter, startScale));
  var uDelta = endCenterXY.subtract(startCenterXY);

  var w0 = Math.max(startViewport.width, startViewport.height);
  var w1 = w0 / scale;
  var u1 = Math.sqrt(uDelta.x * uDelta.x + uDelta.y * uDelta.y);
  // u0 is treated as '0' in Eq (9).

  // Linearly interpolate 'bearing' and 'pitch'
  var _arr2 = ['bearing', 'pitch'];
  for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
    var _p = _arr2[_i2];
    var _startValue = startViewport[_p];
    var _endValue = endViewport[_p];
    animatedViewport[_p] = lerp(_startValue, _endValue, t);
  }

  // If change in center is too small, do linear interpolaiton.
  if (Math.abs(u1) < EPSILON) {
    var _arr3 = ['latitude', 'longitude', 'zoom'];

    for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
      var p = _arr3[_i3];
      var startValue = startViewport[p];
      var endValue = endViewport[p];
      animatedViewport[p] = lerp(startValue, endValue, t);
    }
    return animatedViewport;
  }

  // Implement Equation (9) from above algorithm.
  var rho2 = rho * rho;
  var b0 = (w1 * w1 - w0 * w0 + rho2 * rho2 * u1 * u1) / (2 * w0 * rho2 * u1);
  var b1 = (w1 * w1 - w0 * w0 - rho2 * rho2 * u1 * u1) / (2 * w1 * rho2 * u1);
  var r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0);
  var r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
  function w(s) {
    return Math.cosh(r0) / Math.cosh(r0 + rho * s);
  }
  function u(s) {
    return w0 * ((Math.cosh(r0) * Math.tanh(r0 + rho * s) - Math.sinh(r0)) / rho2) / u1;
  }
  var S = (r1 - r0) / rho;
  var s = t * S;
  var scaleIncrement = 1 / w(s); // Using w method for scaling.
  var newZoom = startZoom + scaleToZoom(scaleIncrement);

  var newCenter = (0, _viewportMercatorProject.unprojectFlat)(startCenterXY.add(uDelta.scale(u(s))).scale(scaleIncrement), zoomToScale(newZoom));
  animatedViewport.longitude = newCenter[0];
  animatedViewport.latitude = newCenter[1];
  animatedViewport.zoom = newZoom;
  return animatedViewport;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,