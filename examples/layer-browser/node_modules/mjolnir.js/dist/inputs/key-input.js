'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _constants = require('../constants');

var _globals = require('../utils/globals');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/* global window */
var KEY_EVENTS = _constants.INPUT_EVENT_TYPES.KEY_EVENTS;

var DOWN_EVENT_TYPE = 'keydown';
var UP_EVENT_TYPE = 'keyup';

var KeyInput = function () {
  function KeyInput(element, callback) {
    var _this = this;

    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    (0, _classCallCheck3.default)(this, KeyInput);

    this.element = element;
    this.callback = callback;

    this.options = (0, _assign2.default)({ enable: true }, options);
    this.enableDownEvent = this.options.enable;
    this.enableUpEvent = this.options.enable;

    this.events = KEY_EVENTS.concat(options.events || []);

    this.handleEvent = this.handleEvent.bind(this);

    // Use mock in test environment
    var parent = _globals.isBrowser ? window : element;
    this.events.forEach(function (event) {
      return parent.addEventListener(event, _this.handleEvent);
    });
  }

  (0, _createClass3.default)(KeyInput, [{
    key: 'destroy',
    value: function destroy() {
      var _this2 = this;

      var parent = _globals.isBrowser ? window : this.element;
      this.events.forEach(function (event) {
        return parent.removeEventListener(event, _this2.handleEvent);
      });
    }

    /**
     * Enable this input (begin processing events)
     * if the specified event type is among those handled by this input.
     */

  }, {
    key: 'enableEventType',
    value: function enableEventType(eventType, enabled) {
      if (eventType === DOWN_EVENT_TYPE) {
        this.enableDownEvent = enabled;
      }
      if (eventType === UP_EVENT_TYPE) {
        this.enableUpEvent = enabled;
      }
    }
  }, {
    key: 'handleEvent',
    value: function handleEvent(event) {
      // Ignore if focused on text input
      var targetElement = event.target || event.srcElement;
      if (targetElement.tagName === 'INPUT' && targetElement.type === 'text' || targetElement.tagName === 'TEXTAREA') {
        return;
      }

      if (this.enableDownEvent && event.type === 'keydown') {
        this.callback({
          type: DOWN_EVENT_TYPE,
          srcEvent: event,
          key: event.key,
          target: event.target
        });
      }

      if (this.enableUpEvent && event.type === 'keyup') {
        this.callback({
          type: UP_EVENT_TYPE,
          srcEvent: event,
          key: event.key,
          target: event.target
        });
      }
    }
  }]);
  return KeyInput;
}();

exports.default = KeyInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbnB1dHMva2V5LWlucHV0LmpzIl0sIm5hbWVzIjpbIktFWV9FVkVOVFMiLCJET1dOX0VWRU5UX1RZUEUiLCJVUF9FVkVOVF9UWVBFIiwiS2V5SW5wdXQiLCJlbGVtZW50IiwiY2FsbGJhY2siLCJvcHRpb25zIiwiZW5hYmxlIiwiZW5hYmxlRG93bkV2ZW50IiwiZW5hYmxlVXBFdmVudCIsImV2ZW50cyIsImNvbmNhdCIsImhhbmRsZUV2ZW50IiwiYmluZCIsInBhcmVudCIsIndpbmRvdyIsImZvckVhY2giLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZXZlbnRUeXBlIiwiZW5hYmxlZCIsInRhcmdldEVsZW1lbnQiLCJ0YXJnZXQiLCJzcmNFbGVtZW50IiwidGFnTmFtZSIsInR5cGUiLCJzcmNFdmVudCIsImtleSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUJBOztBQUNBOzs7O0FBdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0lBSU9BLFUsZ0NBQUFBLFU7O0FBQ1AsSUFBTUMsa0JBQWtCLFNBQXhCO0FBQ0EsSUFBTUMsZ0JBQWdCLE9BQXRCOztJQUVxQkMsUTtBQUNuQixvQkFBWUMsT0FBWixFQUFxQkMsUUFBckIsRUFBNkM7QUFBQTs7QUFBQSxRQUFkQyxPQUFjLHVFQUFKLEVBQUk7QUFBQTs7QUFDM0MsU0FBS0YsT0FBTCxHQUFlQSxPQUFmO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQkEsUUFBaEI7O0FBRUEsU0FBS0MsT0FBTCxHQUFlLHNCQUFjLEVBQUNDLFFBQVEsSUFBVCxFQUFkLEVBQThCRCxPQUE5QixDQUFmO0FBQ0EsU0FBS0UsZUFBTCxHQUF1QixLQUFLRixPQUFMLENBQWFDLE1BQXBDO0FBQ0EsU0FBS0UsYUFBTCxHQUFxQixLQUFLSCxPQUFMLENBQWFDLE1BQWxDOztBQUVBLFNBQUtHLE1BQUwsR0FBY1YsV0FBV1csTUFBWCxDQUFrQkwsUUFBUUksTUFBUixJQUFrQixFQUFwQyxDQUFkOztBQUVBLFNBQUtFLFdBQUwsR0FBbUIsS0FBS0EsV0FBTCxDQUFpQkMsSUFBakIsQ0FBc0IsSUFBdEIsQ0FBbkI7O0FBRUE7QUFDQSxRQUFNQyxTQUFTLHFCQUFZQyxNQUFaLEdBQXFCWCxPQUFwQztBQUNBLFNBQUtNLE1BQUwsQ0FBWU0sT0FBWixDQUFvQjtBQUFBLGFBQVNGLE9BQU9HLGdCQUFQLENBQXdCQyxLQUF4QixFQUErQixNQUFLTixXQUFwQyxDQUFUO0FBQUEsS0FBcEI7QUFDRDs7Ozs4QkFFUztBQUFBOztBQUNSLFVBQU1FLFNBQVMscUJBQVlDLE1BQVosR0FBcUIsS0FBS1gsT0FBekM7QUFDQSxXQUFLTSxNQUFMLENBQVlNLE9BQVosQ0FBb0I7QUFBQSxlQUFTRixPQUFPSyxtQkFBUCxDQUEyQkQsS0FBM0IsRUFBa0MsT0FBS04sV0FBdkMsQ0FBVDtBQUFBLE9BQXBCO0FBQ0Q7O0FBRUQ7Ozs7Ozs7b0NBSWdCUSxTLEVBQVdDLE8sRUFBUztBQUNsQyxVQUFJRCxjQUFjbkIsZUFBbEIsRUFBbUM7QUFDakMsYUFBS08sZUFBTCxHQUF1QmEsT0FBdkI7QUFDRDtBQUNELFVBQUlELGNBQWNsQixhQUFsQixFQUFpQztBQUMvQixhQUFLTyxhQUFMLEdBQXFCWSxPQUFyQjtBQUNEO0FBQ0Y7OztnQ0FFV0gsSyxFQUFPO0FBQ2pCO0FBQ0EsVUFBTUksZ0JBQWdCSixNQUFNSyxNQUFOLElBQWdCTCxNQUFNTSxVQUE1QztBQUNBLFVBQUtGLGNBQWNHLE9BQWQsS0FBMEIsT0FBMUIsSUFBcUNILGNBQWNJLElBQWQsS0FBdUIsTUFBN0QsSUFDRkosY0FBY0csT0FBZCxLQUEwQixVQUQ1QixFQUN3QztBQUN0QztBQUNEOztBQUVELFVBQUksS0FBS2pCLGVBQUwsSUFBd0JVLE1BQU1RLElBQU4sS0FBZSxTQUEzQyxFQUFzRDtBQUNwRCxhQUFLckIsUUFBTCxDQUFjO0FBQ1pxQixnQkFBTXpCLGVBRE07QUFFWjBCLG9CQUFVVCxLQUZFO0FBR1pVLGVBQUtWLE1BQU1VLEdBSEM7QUFJWkwsa0JBQVFMLE1BQU1LO0FBSkYsU0FBZDtBQU1EOztBQUVELFVBQUksS0FBS2QsYUFBTCxJQUFzQlMsTUFBTVEsSUFBTixLQUFlLE9BQXpDLEVBQWtEO0FBQ2hELGFBQUtyQixRQUFMLENBQWM7QUFDWnFCLGdCQUFNeEIsYUFETTtBQUVaeUIsb0JBQVVULEtBRkU7QUFHWlUsZUFBS1YsTUFBTVUsR0FIQztBQUlaTCxrQkFBUUwsTUFBTUs7QUFKRixTQUFkO0FBTUQ7QUFDRjs7Ozs7a0JBN0RrQnBCLFEiLCJmaWxlIjoia2V5LWlucHV0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE3IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHtJTlBVVF9FVkVOVF9UWVBFU30gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7aXNCcm93c2VyfSBmcm9tICcuLi91dGlscy9nbG9iYWxzJztcblxuY29uc3Qge0tFWV9FVkVOVFN9ID0gSU5QVVRfRVZFTlRfVFlQRVM7XG5jb25zdCBET1dOX0VWRU5UX1RZUEUgPSAna2V5ZG93bic7XG5jb25zdCBVUF9FVkVOVF9UWVBFID0gJ2tleXVwJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgS2V5SW5wdXQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjYWxsYmFjaywgb3B0aW9ucyA9IHt9KSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG5cbiAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtlbmFibGU6IHRydWV9LCBvcHRpb25zKTtcbiAgICB0aGlzLmVuYWJsZURvd25FdmVudCA9IHRoaXMub3B0aW9ucy5lbmFibGU7XG4gICAgdGhpcy5lbmFibGVVcEV2ZW50ID0gdGhpcy5vcHRpb25zLmVuYWJsZTtcblxuICAgIHRoaXMuZXZlbnRzID0gS0VZX0VWRU5UUy5jb25jYXQob3B0aW9ucy5ldmVudHMgfHwgW10pO1xuXG4gICAgdGhpcy5oYW5kbGVFdmVudCA9IHRoaXMuaGFuZGxlRXZlbnQuYmluZCh0aGlzKTtcblxuICAgIC8vIFVzZSBtb2NrIGluIHRlc3QgZW52aXJvbm1lbnRcbiAgICBjb25zdCBwYXJlbnQgPSBpc0Jyb3dzZXIgPyB3aW5kb3cgOiBlbGVtZW50O1xuICAgIHRoaXMuZXZlbnRzLmZvckVhY2goZXZlbnQgPT4gcGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIHRoaXMuaGFuZGxlRXZlbnQpKTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgY29uc3QgcGFyZW50ID0gaXNCcm93c2VyID8gd2luZG93IDogdGhpcy5lbGVtZW50O1xuICAgIHRoaXMuZXZlbnRzLmZvckVhY2goZXZlbnQgPT4gcGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIHRoaXMuaGFuZGxlRXZlbnQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmFibGUgdGhpcyBpbnB1dCAoYmVnaW4gcHJvY2Vzc2luZyBldmVudHMpXG4gICAqIGlmIHRoZSBzcGVjaWZpZWQgZXZlbnQgdHlwZSBpcyBhbW9uZyB0aG9zZSBoYW5kbGVkIGJ5IHRoaXMgaW5wdXQuXG4gICAqL1xuICBlbmFibGVFdmVudFR5cGUoZXZlbnRUeXBlLCBlbmFibGVkKSB7XG4gICAgaWYgKGV2ZW50VHlwZSA9PT0gRE9XTl9FVkVOVF9UWVBFKSB7XG4gICAgICB0aGlzLmVuYWJsZURvd25FdmVudCA9IGVuYWJsZWQ7XG4gICAgfVxuICAgIGlmIChldmVudFR5cGUgPT09IFVQX0VWRU5UX1RZUEUpIHtcbiAgICAgIHRoaXMuZW5hYmxlVXBFdmVudCA9IGVuYWJsZWQ7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlRXZlbnQoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgaWYgZm9jdXNlZCBvbiB0ZXh0IGlucHV0XG4gICAgY29uc3QgdGFyZ2V0RWxlbWVudCA9IGV2ZW50LnRhcmdldCB8fCBldmVudC5zcmNFbGVtZW50O1xuICAgIGlmICgodGFyZ2V0RWxlbWVudC50YWdOYW1lID09PSAnSU5QVVQnICYmIHRhcmdldEVsZW1lbnQudHlwZSA9PT0gJ3RleHQnKSB8fFxuICAgICAgdGFyZ2V0RWxlbWVudC50YWdOYW1lID09PSAnVEVYVEFSRUEnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZW5hYmxlRG93bkV2ZW50ICYmIGV2ZW50LnR5cGUgPT09ICdrZXlkb3duJykge1xuICAgICAgdGhpcy5jYWxsYmFjayh7XG4gICAgICAgIHR5cGU6IERPV05fRVZFTlRfVFlQRSxcbiAgICAgICAgc3JjRXZlbnQ6IGV2ZW50LFxuICAgICAgICBrZXk6IGV2ZW50LmtleSxcbiAgICAgICAgdGFyZ2V0OiBldmVudC50YXJnZXRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmVuYWJsZVVwRXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gJ2tleXVwJykge1xuICAgICAgdGhpcy5jYWxsYmFjayh7XG4gICAgICAgIHR5cGU6IFVQX0VWRU5UX1RZUEUsXG4gICAgICAgIHNyY0V2ZW50OiBldmVudCxcbiAgICAgICAga2V5OiBldmVudC5rZXksXG4gICAgICAgIHRhcmdldDogZXZlbnQudGFyZ2V0XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==